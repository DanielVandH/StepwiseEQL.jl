var documenterSearchIndex = {"docs":
[{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/cs2.jl\"","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cs2.ipynb","category":"page"},{"location":"case_studies/cs2/#Case-Studies:-Case-Study-2","page":"Case Study 2","title":"Case Studies: Case Study 2","text":"","category":"section"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"This example shows how we obtained the results in the paper for the second case study. Let us load in the package we will need.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Setfield\nusing LinearSolve","category":"page"},{"location":"case_studies/cs2/#Simulating","page":"Case Study 2","title":"Simulating","text":"","category":"section"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"Let us start by simulating the cell dynamics. We use the force law F(ell) = k(s - ell) as usual.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"k, η, s = 50.0, 1.0, 1 / 5\nforce_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=k, s=s)\ninitial_condition = LinRange(0, 5, 60) |> collect\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time=100.0,\n    damping_constant=η,\n    initial_condition,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=LinRange(0, 100.0, 1000))","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"retcode: Success\nInterpolation: 1st order linear\nt: 1000-element Vector{Float64}:\n   0.0\n   0.10010010010010009\n   0.20020020020020018\n   0.3003003003003003\n   0.40040040040040037\n   ⋮\n  99.69969969969969\n  99.7997997997998\n  99.8998998998999\n 100.0\nu: 1000-element Vector{Vector{Float64}}:\n [0.0, 0.0847457627118644, 0.1694915254237288, 0.2542372881355932, 0.3389830508474576, 0.423728813559322, 0.5084745762711864, 0.5932203389830508, 0.6779661016949152, 0.7627118644067797  …  4.23728813559322, 4.322033898305085, 4.406779661016949, 4.491525423728814, 4.576271186440678, 4.661016949152542, 4.745762711864407, 4.830508474576271, 4.915254237288136, 5.0]\n [0.0, 0.08474576271186425, 0.1694915254237292, 0.25423728813559265, 0.33898305084745817, 0.42372881355932146, 0.508474576271187, 0.5932203389830506, 0.6779661016949148, 0.762711864406781  …  4.236835315302549, 4.3243882103357025, 4.407450636109118, 4.500008030405869, 4.586094955162684, 4.690841206150504, 4.79252784949479, 4.923274379242477, 5.063630705437774, 5.237700604156148]\n [0.0, 0.08474576271186443, 0.16949152542372878, 0.2542372881355933, 0.33898305084745767, 0.4237288135593213, 0.508474576271188, 0.593220338983049, 0.677966101694917, 0.7627118644067777  …  4.2465141859992634, 4.330901276534235, 4.430802760720429, 4.522064183397137, 4.635168935888922, 4.742894795486018, 4.877279510575617, 5.0141479656359556, 5.1784484869409, 5.35585639369578]\n [0.0, 0.08474576271186464, 0.16949152542372814, 0.2542372881355946, 0.33898305084745445, 0.42372881355933, 0.5084745762711655, 0.5932203389831081, 0.6779661016947601, 0.762711864407193  …  4.25723237050814, 4.3573670237175675, 4.4549362982580885, 4.566875675192909, 4.679352538248943, 4.809290059729547, 4.944563030156533, 5.099056355930457, 5.264456507756895, 5.448636152634224]\n [0.0, 0.084745762712383, 0.16949152542234872, 0.25423728813872243, 0.33898305084064084, 0.4237288135738785, 0.5084745762406028, 0.5932203390463257, 0.6779661015659898, 0.7627118646655209  …  4.27912924869909, 4.384232626495193, 4.490326342767937, 4.608410853608311, 4.730472207553159, 4.866677884442501, 5.010477504851458, 5.169755651179868, 5.340224660641128, 5.526204837029872]\n ⋮\n [0.0, 0.1955145324067704, 0.3907867309532305, 0.5865555859473159, 0.7816001656610787, 0.977632577970293, 1.1724669220336417, 1.3687693751488976, 1.5634134466584246, 1.7599897057316751  …  9.832578468378241, 10.032572689449998, 10.230665585957821, 10.430670537789483, 10.629228418943393, 10.829237066283419, 11.028270006667945, 11.228277253459972, 11.42779202307594, 11.627794783168833]\n [0.0, 0.19541020840180437, 0.39105836193654087, 0.5862439084596128, 0.7821406658261177, 0.9771174157905476, 1.1732707978093369, 1.3680571271244457, 1.5644725324358597, 1.7590892276392485  …  9.834254205411455, 10.03216958392982, 10.232131854947687, 10.430495376008865, 10.63047379676449, 10.82929673651816, 11.029285576300794, 11.228576066007403, 11.428571459133126, 11.62833440846054]\n [0.0, 0.19545891563597326, 0.391024136648353, 0.5863896193155502, 0.782072860056575, 0.9773589019384226, 1.1731706932539063, 1.3683923553349133, 1.5643420319325214, 1.7595153806039439  …  9.834533173145042, 10.033023016457076, 10.232477182205013, 10.431294252055933, 10.6308865316696, 10.830037075465086, 11.02976606100394, 11.229254577532869, 11.429119312229101, 11.628948515380984]\n [0.0, 0.19548478549047751, 0.39103530291603067, 0.5864670720036574, 0.7820953307762282, 0.9774874682155896, 1.1732047425227528, 1.3685712577181102, 1.5643880652452753, 1.7597435402083226  …  9.835017692166595, 10.033687117943265, 10.232986983756186, 10.431945814145724, 10.63142081442897, 10.830673741625754, 11.030323795760841, 11.229874195193434, 11.429699239628151, 11.629549146143887]","category":"page"},{"location":"case_studies/cs2/#Equation-learning","page":"Case Study 2","title":"Equation learning","text":"","category":"section"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"We now define the equation learning problem. The mechanisms to learn are D(q), H(q), and E(q). The basis functions we use are:","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"diffusion_basis = PolynomialBasis(-1, -3)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-1, -3)","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"(::BasisSet{Tuple{StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}}}) (generic function with 3 methods)","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"We now learn the equations. Our first attempt is below, where we use initial=:none so that we start with no coefficients initially active.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"eql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35,))","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"StepwiseEQL Solution.\n    D(q) = θ₃ᵈ ϕ₃ᵈ(q)\n    H(q) = 0\n    E(q) = 0\n┌──────┬───────────────────┬──────────────────────────────┬──────────────────┬───────┐\n│ Step │  θ₁ᵈ   θ₂ᵈ    θ₃ᵈ │  θ₁ʰ   θ₂ʰ   θ₃ʰ   θ₄ʰ   θ₅ʰ │  θ₁ᵉ   θ₂ᵉ   θ₃ᵉ │  Loss │\n├──────┼───────────────────┼──────────────────────────────┼──────────────────┼───────┤\n│    1 │ 0.00  0.00   0.00 │ 0.00  0.00  0.00  0.00  0.00 │ 0.00  0.00  0.00 │ -1.40 │\n│    2 │ 0.00  0.00  25.06 │ 0.00  0.00  0.00  0.00  0.00 │ 0.00  0.00  0.00 │ -0.40 │\n└──────┴───────────────────┴──────────────────────────────┴──────────────────┴───────┘","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"This result is clearly not perfect. To improve this, we limit the time range. We also re-simulate the cell dynamics with a saving frequency.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"sol = solve(prob, Tsit5(), saveat=15 // 199)\neql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35,),\n    time_range=(0.0, 15.0))","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n    H(q) = θ₁ʰ ϕ₁ʰ(q) + θ₂ʰ ϕ₂ʰ(q)\n    E(q) = θ₁ᵉ ϕ₁ᵉ(q)\n┌──────┬───────────────────┬───────────────────────────────┬──────────────────┬───────┐\n│ Step │  θ₁ᵈ    θ₂ᵈ   θ₃ᵈ │  θ₁ʰ    θ₂ʰ   θ₃ʰ   θ₄ʰ   θ₅ʰ │  θ₁ᵉ   θ₂ᵉ   θ₃ᵉ │  Loss │\n├──────┼───────────────────┼───────────────────────────────┼──────────────────┼───────┤\n│    1 │ 0.00   0.00  0.00 │ 0.00   0.00  0.00  0.00  0.00 │ 0.00  0.00  0.00 │ -3.37 │\n│    2 │ 0.00   0.00  0.00 │ 0.00  -0.03  0.00  0.00  0.00 │ 0.00  0.00  0.00 │ -2.37 │\n│    3 │ 0.00   0.00  0.00 │ 0.00  -0.03  0.00  0.00  0.00 │ 8.74  0.00  0.00 │ -3.68 │\n│    4 │ 0.00  47.38  0.00 │ 0.00  -0.03  0.00  0.00  0.00 │ 8.74  0.00  0.00 │ -4.02 │\n│    5 │ 0.00  47.38  0.00 │ 8.41  -1.69  0.00  0.00  0.00 │ 8.74  0.00  0.00 │ -8.14 │\n└──────┴───────────────────┴───────────────────────────────┴──────────────────┴───────┘","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"These results have improved slightly. To plot them, we use the following function.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"function plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis, conserve_mass=false)\n    t = (0, 5, 10, 25, 50, 100)\n    prob = sol.prob.p\n    prob = @set prob.final_time = 100.0\n    sol = solve(prob, Tsit5(), saveat=[collect(t); LinRange(0, 100, 2500)] |> sort |> unique)\n    time_indices = [findlast(≤(τ), sol.t) for τ in t]\n    colors = (:black, :red, :blue, :green, :orange, :purple, :brown)\n\n    pde = eql_sol.pde\n    pde = @set pde.final_time = 100.0 # need to resolve so that we plot over the complete time interval\n    pde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\n    pde_continuum = deepcopy(pde)\n    pde_continuum.diffusion_parameters.θ .= [0, k / η, 0]\n    pde_continuum.boundary_conditions.rhs.p.θ .= [0, 2.0, -2.0s, 0, 0]\n    pde_continuum.boundary_conditions.moving_boundary.p.θ .= [0, k / η, 0]\n    pde_ξ = pde_continuum.geometry.mesh_points\n    pde_L = pde_sol[end, :]\n    pde_q = pde_sol[begin:(end-1), :]\n    cell_q = node_densities.(sol.u)\n    cell_r = sol.u\n    cell_L = sol[end, :]\n\n    q_range = LinRange(5, 12, 250)\n\n    fig = Figure(fontsize=45, resolution=(2220, 961))\n    top_grid = fig[1, 1] = GridLayout(1, 2)\n    bottom_grid = fig[2, 1] = GridLayout(1, 3)\n\n    ax_pde = Axis(top_grid[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\", width=950, height=300,\n        title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n        xticks=(0:5:15, [L\"%$s\" for s in 0:5:15]), yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\n    for (j, i) in enumerate(time_indices)\n        lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n        lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\n    end\n    arrows!(ax_pde, [6.0], [12.0], [4.0], [-3.0], color=:black, linewidth=8, arrowsize=40)\n    text!(ax_pde, [8.0], [11.0], text=L\"t\", color=:black, fontsize=63)\n    xlims!(ax_pde, 0, 15)\n    ylims!(ax_pde, 4, 16)\n\n    ax_leading_edge = Axis(top_grid[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\", width=950, height=300,\n        title=L\"(b):$ $ Leading edge comparison\", titlealign=:left,\n        xticks=(0:10:100, [L\"%$s\" for s in 0:10:100]), yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\n    lines!(ax_leading_edge, pde_sol.t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\n    lines!(ax_leading_edge, sol.t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\n    axislegend(position=:rb)\n    xlims!(ax_leading_edge, 0, 100)\n    ylims!(ax_leading_edge, 0, 15)\n\n    ax_diffusion = Axis(bottom_grid[1, 1],\n        xlabel=L\"q\", ylabel=L\"D(q)\", width=600, height=300,\n        title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n        xticks=(5:3:12, [L\"%$s\" for s in 5:3:12]), yticks=(0:5, [L\"%$s\" for s in 0:5]))\n    D_cont_fnc = q -> (k / η) / q^2\n    D_cont = D_cont_fnc.(q_range)\n    local D_sol\n    try\n        D_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n    catch e\n        print(e)\n        D_sol = D_cont\n    end\n    lines!(ax_diffusion, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_diffusion, q_range, D_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_diffusion, 5, 12)\n    ylims!(ax_diffusion, 0, 5)\n\n    ax_rhs = Axis(bottom_grid[1, 2],\n        xlabel=L\"q\", ylabel=L\"H(q)\", width=600, height=300,\n        title=L\"(d): $H(q)$ comparison\", titlealign=:left,\n        xticks=(5:3:12, [L\"%$s\" for s in 5:3:12]), yticks=(-100:40:20, [L\"%$s\" for s in -100:40:20]))\n    RHS_cont_fnc = q -> 2q^2 * (1 - s * q)\n    RHS_cont = RHS_cont_fnc.(q_range)\n    local RHS_sol\n    try\n        RHS_sol = rhs_basis.(q_range, Ref(eql_sol.rhs_theta), Ref(nothing))\n    catch e\n        print(e)\n        RHS_sol = RHS_cont\n    end\n    lines!(ax_rhs, q_range, RHS_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_rhs, q_range, RHS_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_rhs, 5, 12)\n    ylims!(ax_rhs, -100, 20)\n\n    ax_moving_boundary = Axis(bottom_grid[1, 3],\n        xlabel=L\"q\", ylabel=L\"E(q)\", width=600, height=300,\n        title=L\"(e): $E(q)$ comparison\", titlealign=:left,\n        xticks=(5:3:12, [L\"%$s\" for s in 5:3:12]), yticks=(0:5, [L\"%$s\" for s in 0:5]))\n    MB_cont_fnc = q -> (k / η) / q^2\n    MB_cont = MB_cont_fnc.(q_range)\n    local MB_sol\n    try\n        if !conserve_mass\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.moving_boundary_theta), Ref(nothing))\n        else\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n        end\n    catch e\n        print(e)\n        MB_sol = MB_cont\n    end\n    lines!(ax_moving_boundary, q_range, MB_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_moving_boundary, q_range, MB_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_moving_boundary, 5, 12)\n    ylims!(ax_moving_boundary, 0, 5)\n    fig\nend","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"Using this function, we obtain the plot below.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"fig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis)","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"<figure>\n    <img src='figure6.png', alt='Figure 6 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"Since the leading edges start to diverge for late time, we need to prune the matrix slightly. We do this as follows, giving our improved results.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"eql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35, dL=0.1),\n    time_range=(0.0, 15.0))","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n    H(q) = θ₁ʰ ϕ₁ʰ(q) + θ₂ʰ ϕ₂ʰ(q)\n    E(q) = θ₁ᵉ ϕ₁ᵉ(q)\n┌──────┬───────────────────┬───────────────────────────────┬──────────────────┬────────┐\n│ Step │  θ₁ᵈ    θ₂ᵈ   θ₃ᵈ │  θ₁ʰ    θ₂ʰ   θ₃ʰ   θ₄ʰ   θ₅ʰ │  θ₁ᵉ   θ₂ᵉ   θ₃ᵉ │   Loss │\n├──────┼───────────────────┼───────────────────────────────┼──────────────────┼────────┤\n│    1 │ 0.00   0.00  0.00 │ 0.00   0.00  0.00  0.00  0.00 │ 0.00  0.00  0.00 │  -3.37 │\n│    2 │ 0.00   0.00  0.00 │ 0.00  -0.03  0.00  0.00  0.00 │ 0.00  0.00  0.00 │  -2.37 │\n│    3 │ 0.00   0.00  0.00 │ 0.00  -0.03  0.00  0.00  0.00 │ 9.42  0.00  0.00 │  -3.93 │\n│    4 │ 0.00  47.38  0.00 │ 0.00  -0.03  0.00  0.00  0.00 │ 9.42  0.00  0.00 │  -4.41 │\n│    5 │ 0.00  47.38  0.00 │ 8.41  -1.69  0.00  0.00  0.00 │ 9.42  0.00  0.00 │ -12.23 │\n└──────┴───────────────────┴───────────────────────────────┴──────────────────┴────────┘","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"fig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis)","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"<figure>\n    <img src='figure7.png', alt='Figure 7 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs2/#Conservation-of-mass","page":"Case Study 2","title":"Conservation of mass","text":"","category":"section"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"If we want to enforce conservation of mass, we can set D(q) = E(q) by simply using the keyword argument conserve_mass=true as below. These are the results that we describe in more detail in the supplementary material of our paper.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"eql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35, dL=0.1),\n    time_range=(0.0, 15.0), conserve_mass=true)","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n    H(q) = θ₂ʰ ϕ₂ʰ(q) + θ₅ʰ ϕ₅ʰ(q)\n┌──────┬───────────────────┬────────────────────────────────┬────────┐\n│ Step │  θ₁ᵈ    θ₂ᵈ   θ₃ᵈ │  θ₁ʰ    θ₂ʰ   θ₃ʰ   θ₄ʰ    θ₅ʰ │   Loss │\n├──────┼───────────────────┼────────────────────────────────┼────────┤\n│    1 │ 0.00   0.00  0.00 │ 0.00   0.00  0.00  0.00   0.00 │  -3.37 │\n│    2 │ 0.00   0.00  0.00 │ 0.00  -0.03  0.00  0.00   0.00 │  -2.37 │\n│    3 │ 0.00  47.41  0.00 │ 0.00  -0.03  0.00  0.00   0.00 │  -3.85 │\n│    4 │ 0.00  47.41  0.00 │ 0.00   0.44  0.00  0.00  -0.00 │ -10.64 │\n└──────┴───────────────────┴────────────────────────────────┴────────┘","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"fig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis, true)","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"<figure>\n    <img src='sfigure_conserve.png', alt='Figure S2 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs2/#Just-the-code","page":"Case Study 2","title":"Just the code","text":"","category":"section"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Setfield\nusing LinearSolve\n\nk, η, s = 50.0, 1.0, 1 / 5\nforce_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=k, s=s)\ninitial_condition = LinRange(0, 5, 60) |> collect\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time=100.0,\n    damping_constant=η,\n    initial_condition,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=LinRange(0, 100.0, 1000))\n\ndiffusion_basis = PolynomialBasis(-1, -3)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-1, -3)\n\neql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35,))\n\nsol = solve(prob, Tsit5(), saveat=15 // 199)\neql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35,),\n    time_range=(0.0, 15.0))\n\nfunction plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis, conserve_mass=false)\n    t = (0, 5, 10, 25, 50, 100)\n    prob = sol.prob.p\n    prob = @set prob.final_time = 100.0\n    sol = solve(prob, Tsit5(), saveat=[collect(t); LinRange(0, 100, 2500)] |> sort |> unique)\n    time_indices = [findlast(≤(τ), sol.t) for τ in t]\n    colors = (:black, :red, :blue, :green, :orange, :purple, :brown)\n\n    pde = eql_sol.pde\n    pde = @set pde.final_time = 100.0 # need to resolve so that we plot over the complete time interval\n    pde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\n    pde_continuum = deepcopy(pde)\n    pde_continuum.diffusion_parameters.θ .= [0, k / η, 0]\n    pde_continuum.boundary_conditions.rhs.p.θ .= [0, 2.0, -2.0s, 0, 0]\n    pde_continuum.boundary_conditions.moving_boundary.p.θ .= [0, k / η, 0]\n    pde_ξ = pde_continuum.geometry.mesh_points\n    pde_L = pde_sol[end, :]\n    pde_q = pde_sol[begin:(end-1), :]\n    cell_q = node_densities.(sol.u)\n    cell_r = sol.u\n    cell_L = sol[end, :]\n\n    q_range = LinRange(5, 12, 250)\n\n    fig = Figure(fontsize=45, resolution=(2220, 961))\n    top_grid = fig[1, 1] = GridLayout(1, 2)\n    bottom_grid = fig[2, 1] = GridLayout(1, 3)\n\n    ax_pde = Axis(top_grid[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\", width=950, height=300,\n        title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n        xticks=(0:5:15, [L\"%$s\" for s in 0:5:15]), yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\n    for (j, i) in enumerate(time_indices)\n        lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n        lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\n    end\n    arrows!(ax_pde, [6.0], [12.0], [4.0], [-3.0], color=:black, linewidth=8, arrowsize=40)\n    text!(ax_pde, [8.0], [11.0], text=L\"t\", color=:black, fontsize=63)\n    xlims!(ax_pde, 0, 15)\n    ylims!(ax_pde, 4, 16)\n\n    ax_leading_edge = Axis(top_grid[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\", width=950, height=300,\n        title=L\"(b):$ $ Leading edge comparison\", titlealign=:left,\n        xticks=(0:10:100, [L\"%$s\" for s in 0:10:100]), yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\n    lines!(ax_leading_edge, pde_sol.t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\n    lines!(ax_leading_edge, sol.t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\n    axislegend(position=:rb)\n    xlims!(ax_leading_edge, 0, 100)\n    ylims!(ax_leading_edge, 0, 15)\n\n    ax_diffusion = Axis(bottom_grid[1, 1],\n        xlabel=L\"q\", ylabel=L\"D(q)\", width=600, height=300,\n        title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n        xticks=(5:3:12, [L\"%$s\" for s in 5:3:12]), yticks=(0:5, [L\"%$s\" for s in 0:5]))\n    D_cont_fnc = q -> (k / η) / q^2\n    D_cont = D_cont_fnc.(q_range)\n    local D_sol\n    try\n        D_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n    catch e\n        print(e)\n        D_sol = D_cont\n    end\n    lines!(ax_diffusion, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_diffusion, q_range, D_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_diffusion, 5, 12)\n    ylims!(ax_diffusion, 0, 5)\n\n    ax_rhs = Axis(bottom_grid[1, 2],\n        xlabel=L\"q\", ylabel=L\"H(q)\", width=600, height=300,\n        title=L\"(d): $H(q)$ comparison\", titlealign=:left,\n        xticks=(5:3:12, [L\"%$s\" for s in 5:3:12]), yticks=(-100:40:20, [L\"%$s\" for s in -100:40:20]))\n    RHS_cont_fnc = q -> 2q^2 * (1 - s * q)\n    RHS_cont = RHS_cont_fnc.(q_range)\n    local RHS_sol\n    try\n        RHS_sol = rhs_basis.(q_range, Ref(eql_sol.rhs_theta), Ref(nothing))\n    catch e\n        print(e)\n        RHS_sol = RHS_cont\n    end\n    lines!(ax_rhs, q_range, RHS_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_rhs, q_range, RHS_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_rhs, 5, 12)\n    ylims!(ax_rhs, -100, 20)\n\n    ax_moving_boundary = Axis(bottom_grid[1, 3],\n        xlabel=L\"q\", ylabel=L\"E(q)\", width=600, height=300,\n        title=L\"(e): $E(q)$ comparison\", titlealign=:left,\n        xticks=(5:3:12, [L\"%$s\" for s in 5:3:12]), yticks=(0:5, [L\"%$s\" for s in 0:5]))\n    MB_cont_fnc = q -> (k / η) / q^2\n    MB_cont = MB_cont_fnc.(q_range)\n    local MB_sol\n    try\n        if !conserve_mass\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.moving_boundary_theta), Ref(nothing))\n        else\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n        end\n    catch e\n        print(e)\n        MB_sol = MB_cont\n    end\n    lines!(ax_moving_boundary, q_range, MB_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_moving_boundary, q_range, MB_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_moving_boundary, 5, 12)\n    ylims!(ax_moving_boundary, 0, 5)\n    fig\nend;\n\nfig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis)\n\neql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35, dL=0.1),\n    time_range=(0.0, 15.0))\n\nfig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis)\n\neql_sol = stepwise_selection(sol; diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=500, initial=:none, threshold_tol=(q=0.35, dL=0.1),\n    time_range=(0.0, 15.0), conserve_mass=true)\n\nfig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis, true)","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"","category":"page"},{"location":"case_studies/cs2/","page":"Case Study 2","title":"Case Study 2","text":"This page was generated using Literate.jl.","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To install the package, you first need to install Julia. To do this:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"You can download Julia here, preferably v1.9.0 (the latest version at the time of writing). My preferred installer for Julia is juliaup.\nYou need an actual editor for Julia, e.g. VS Code with the Julia extension.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"To now actually install the package, there are two ways.","category":"page"},{"location":"installation/#Installing-from-GitHub","page":"Installation","title":"Installing from GitHub","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The first way would be to install it as you would any other package. Within Julia, you can do:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg \nPkg.add(\"https://github.com/DanielVandH/StepwiseEQL.jl\")\nusing StepwiseEQL ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"With this, you will have access to the functions required for running the examples in the documentation and thus reproduce the results in the paper; you will need to install the packages listed  in those examples of course. For example, typing ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add([\"CairoMakie\", \"LinearSolve\"])\nusing CairoMakie, LinearSolve","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"will install and load CairoMakie.jl and LinearSolve.jl.","category":"page"},{"location":"installation/#Cloning-from-GitHub","page":"Installation","title":"Cloning from GitHub","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Alternatively, you could clone the repository so that you have the entire package downloaded. With this done, you could for example open the package's folder in VS Code. You can then do:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg \ncd(@__DIR__)\nPkg.activate(\".\") \nPkg.resolve()\nPkg.instantiate()\nusing StepwiseEQL ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"This will activate the package in your REPL, and will also download all the dependencies (packages) needed for the examples.","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_supplementary_material/piecewise_prof.jl\"","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"tip: Tip\nThis example is also available as a Jupyter notebook: piecewise_prof.ipynb","category":"page"},{"location":"supplementary_material/piecewise_prof/#A-Piecewise-Proliferation-Law","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"","category":"section"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"In this section, we show how we reproduced the results from Section 3.3 of Murphy et al. (2020), and how we learned the appropriate continuum model describing these results. In this section, the force law F(ell_i) = k(s - ell_i) is used, and the proliferation law is given by","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"G(ell_i) = begincases 0  0 leq ell_i  ell_p  beta  ell_i geq ell_p endcases","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"where ell_p = 02 and beta=001. Murphy et al. start with 41 nodes initially, spaced such that ell_i = 025 for each i. To start, let us setup the CellProblem, first loading in the packages we will need.","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing DataInterpolations","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"The CellProblem is defined as follows.","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"final_time = 500.0\ndomain_length = 10.0\ninitial_condition = collect(0:0.25:domain_length)\nη = 1.0\ns = 0.0\nk = 0.0001\nΔt = 1e-2\nℓp = 0.2\nβ = 0.01\nFp = (s=s, k=k)\nF = (δ, p) -> p.k * (p.s - δ)\nGp = (ℓp=ℓp, β=β)\nG = (δ, p) -> δ ≥ p.ℓp ? p.β : 0.0\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant=η,\n    force_law=F,\n    force_law_parameters=Fp,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=true)\nRandom.seed!(123)\nens_prob = EnsembleProblem(prob)\nsaveat = 0.1\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=saveat);","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"Now let us compare the discrete results to the continuum limit model's solution.","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"density_results = node_densities_means_only(esol, num_knots=100)\nnumber_results = cell_numbers(esol)\npde = continuum_limit(prob, 1000, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\npde_number_results = [integrate_pde(pde_sol, i) for i in eachindex(pde_sol)]\nt = (0.0, 10.0, 50.0, 100.0, 250.0, 500.0)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\nt_idx = [findlast(≤(τ), esol[1].t) for τ in t]\nfig = Figure(fontsize=57)\nax1 = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:10, [L\"%$s\" for s in 0:5:10]),\n    yticks=(4:8, [L\"%$s\" for s in 4:8]))\nax2 = Axis(fig[1, 2], xlabel=L\"t\", ylabel=L\"N(t)\",\n    title=L\"(b):$ $ Cell number\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:100:500, [L\"%$s\" for s in 0:100:500]),\n    yticks=(40:10:80, [L\"%$s\" for s in 40:10:80]))\nfor (j, i) in enumerate(t_idx)\n    lines!(ax1, density_results.knots[i], density_results.means[i], color=colors[j], linewidth=5)\n    lines!(ax1, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linewidth=5, linestyle=:dash)\nend\nxlims!(ax1, 0, 10)\narrows!(ax1, [5.0], [5.0], [0.0], [2.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax1, [5.2], [5.7], text=L\"t\", color=:black, fontsize=57)\nlines!(ax2, esol[1].t, number_results.means, color=:black, linewidth=5)\nlines!(ax2, esol[1].t, pde_number_results, color=:red, linewidth=5, linestyle=:dash)\nresize_to_layout!(fig)\nfig","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"<figure>\n    <img src='sfigure_murphy.png', alt='Figure S3 from the paper'><br>\n</figure>","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"Obviously, the continuum limit is not working in this case. We are interested in learning a continuum model for this problem. To know what basis to use for D(q) and R(q), we know that in cases where the continuum limit is accurate we would expect","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"beginalign*\nD(q) = alphaq^2 \nR(q) = begincases 0  q  1ell_p  beta q  q leq 1ell_p endcases\nendalign*","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"where alpha=keta. We can write this R(q) as","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"R(q) = beta qmathbb Ileft(q leq frac1ell_pright)","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"where mathbb I(A) is the indicator function for the set A. We could use this representation as an inspiration for the basis functions to use, for example we could consider","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"R(q) = lefttheta_1^rq + theta_2^rq^2 + theta_3^rq^3rightmathbb Ileft(q leq frac1ell_pright)","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"We instead find that this does not lead to any improved model. Instead, we find that working with a polynomial model is appropriate, where we write","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"R(q) = theta_0^r + theta_1^rq + theta_2^rq^2 + theta_3^rq^3 + theta_4^rq^4 + theta_5^rq^5","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"For D(q), this mechanism does not appear to be relevant in this example, with all results visually indistinguishable regardless of whether D(q) = 0 or D(q) = alphaq^2. Thus, we do not bother learning it in this case, simply fixing D(q) = alphaq^2; if we do not fix D(q), we just learn D(q) = 0. We define the bases using PolynomialBasis:","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"diffusion_basis = PolynomialBasis(-2, -2)\nreaction_basis = PolynomialBasis(0, 5)","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"(::BasisSet{NTuple{6, StepwiseEQL.var\"#52#54\"{Int64}}}) (generic function with 3 methods)","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"Let us now learn the equations.","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"eql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    diffusion_theta=[k], initial=:none)","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"StepwiseEQL Solution.\n    R(q) = θ₁ʳ ϕ₁ʳ(q) + θ₂ʳ ϕ₂ʳ(q)\n┌──────┬─────────────────────────────────────┬───────┐\n│ Step │  θ₁ʳ    θ₂ʳ   θ₃ʳ   θ₄ʳ   θ₅ʳ   θ₆ʳ │  Loss │\n├──────┼─────────────────────────────────────┼───────┤\n│    1 │ 0.00   0.00  0.00  0.00  0.00  0.00 │ -1.63 │\n│    2 │ 0.01   0.00  0.00  0.00  0.00  0.00 │ -2.33 │\n│    3 │ 0.08  -0.01  0.00  0.00  0.00  0.00 │ -6.24 │\n└──────┴─────────────────────────────────────┴───────┘","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"Now let us take these results and compare them with the discrete densities.","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"pde = eql_sol.pde\npde_sol = eql_sol.pde_sol\npde_number_results = [integrate_pde(pde_sol, i) for i in eachindex(pde_sol)]\nfig = Figure(fontsize=63)\nax1 = Axis(fig[1, 1:2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    width=2500, height=400,\n    xticks=(0:5:10, [L\"%$s\" for s in 0:5:10]),\n    yticks=(4:8, [L\"%$s\" for s in 4:8]))\nax2 = Axis(fig[2, 1], xlabel=L\"t\", ylabel=L\"N(t)\",\n    title=L\"(b):$ $ Cell number\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:100:500, [L\"%$s\" for s in 0:100:500]),\n    yticks=(40:10:80, [L\"%$s\" for s in 40:10:80]))\nax3 = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    title=L\"(c):$ $ Source\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(4:8, [L\"%$s\" for s in 4:8]),\n    yticks=(0:0.02:0.06, [L\"%$s\" for s in 0:0.02:0.06]))\nfor (j, i) in enumerate(t_idx)\n    lines!(ax1, density_results.knots[i], density_results.means[i], color=colors[j], linewidth=5)\n    lines!(ax1, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linewidth=5, linestyle=:dash)\nend\nxlims!(ax1, 0, 10)\narrows!(ax1, [5.0], [5.0], [0.0], [2.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax1, [5.2], [5.7], text=L\"t\", color=:black, fontsize=47)\nlines!(ax2, esol[1].t, number_results.means, color=:black, linewidth=8, label=L\"$ $Discrete\")\nlines!(ax2, esol[1].t, pde_number_results, color=:red, linewidth=8, linestyle=:dash, label=L\"$ $Continuum\")\naxislegend(ax2, position=:rb)\nR_cont = q -> q * G(1 / q, Gp)\nq_range = LinRange(4, 8, 250)\nR_sol = reaction_basis.(q_range, Ref(eql_sol.reaction_theta), Ref(nothing))\nR_cont_sol = R_cont.(q_range)\nlines!(ax3, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax3, q_range, R_cont_sol, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax3, position=:rt)\nylims!(ax3, -0.001, 0.06)\nresize_to_layout!(fig)\nfig","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"<figure>\n    <img src='sfigure_murphy_2.png', alt='Figure S4 from the paper'><br>\n</figure>","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"As we can now see, the results have significantly improved and we have learned an accurate continuum model. Interestingly, the continuum form for R(q) seems to now be a line that goes through the endpoints of the continuum form of R(q), smoothing out the discontinuity, with R(q) approx beta (K - q), where K=8; this form of R(q) is also of note, since the carrying capacity density for this problem is q=K=8, and beta is the constant term in G(ell_i).","category":"page"},{"location":"supplementary_material/piecewise_prof/#Just-the-code","page":"A Piecewise Proliferation Law","title":"Just the code","text":"","category":"section"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing DataInterpolations\n\nfinal_time = 500.0\ndomain_length = 10.0\ninitial_condition = collect(0:0.25:domain_length)\nη = 1.0\ns = 0.0\nk = 0.0001\nΔt = 1e-2\nℓp = 0.2\nβ = 0.01\nFp = (s=s, k=k)\nF = (δ, p) -> p.k * (p.s - δ)\nGp = (ℓp=ℓp, β=β)\nG = (δ, p) -> δ ≥ p.ℓp ? p.β : 0.0\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant=η,\n    force_law=F,\n    force_law_parameters=Fp,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=true)\nRandom.seed!(123)\nens_prob = EnsembleProblem(prob)\nsaveat = 0.1\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=saveat)\n\ndensity_results = node_densities_means_only(esol, num_knots=100)\nnumber_results = cell_numbers(esol)\npde = continuum_limit(prob, 1000, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\npde_number_results = [integrate_pde(pde_sol, i) for i in eachindex(pde_sol)]\nt = (0.0, 10.0, 50.0, 100.0, 250.0, 500.0)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\nt_idx = [findlast(≤(τ), esol[1].t) for τ in t]\nfig = Figure(fontsize=57)\nax1 = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:10, [L\"%$s\" for s in 0:5:10]),\n    yticks=(4:8, [L\"%$s\" for s in 4:8]))\nax2 = Axis(fig[1, 2], xlabel=L\"t\", ylabel=L\"N(t)\",\n    title=L\"(b):$ $ Cell number\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:100:500, [L\"%$s\" for s in 0:100:500]),\n    yticks=(40:10:80, [L\"%$s\" for s in 40:10:80]))\nfor (j, i) in enumerate(t_idx)\n    lines!(ax1, density_results.knots[i], density_results.means[i], color=colors[j], linewidth=5)\n    lines!(ax1, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linewidth=5, linestyle=:dash)\nend\nxlims!(ax1, 0, 10)\narrows!(ax1, [5.0], [5.0], [0.0], [2.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax1, [5.2], [5.7], text=L\"t\", color=:black, fontsize=57)\nlines!(ax2, esol[1].t, number_results.means, color=:black, linewidth=5)\nlines!(ax2, esol[1].t, pde_number_results, color=:red, linewidth=5, linestyle=:dash)\nresize_to_layout!(fig)\nfig\n\ndiffusion_basis = PolynomialBasis(-2, -2)\nreaction_basis = PolynomialBasis(0, 5)\n\neql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    diffusion_theta=[k], initial=:none)\n\npde = eql_sol.pde\npde_sol = eql_sol.pde_sol\npde_number_results = [integrate_pde(pde_sol, i) for i in eachindex(pde_sol)]\nfig = Figure(fontsize=63)\nax1 = Axis(fig[1, 1:2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    width=2500, height=400,\n    xticks=(0:5:10, [L\"%$s\" for s in 0:5:10]),\n    yticks=(4:8, [L\"%$s\" for s in 4:8]))\nax2 = Axis(fig[2, 1], xlabel=L\"t\", ylabel=L\"N(t)\",\n    title=L\"(b):$ $ Cell number\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:100:500, [L\"%$s\" for s in 0:100:500]),\n    yticks=(40:10:80, [L\"%$s\" for s in 40:10:80]))\nax3 = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    title=L\"(c):$ $ Source\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(4:8, [L\"%$s\" for s in 4:8]),\n    yticks=(0:0.02:0.06, [L\"%$s\" for s in 0:0.02:0.06]))\nfor (j, i) in enumerate(t_idx)\n    lines!(ax1, density_results.knots[i], density_results.means[i], color=colors[j], linewidth=5)\n    lines!(ax1, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linewidth=5, linestyle=:dash)\nend\nxlims!(ax1, 0, 10)\narrows!(ax1, [5.0], [5.0], [0.0], [2.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax1, [5.2], [5.7], text=L\"t\", color=:black, fontsize=47)\nlines!(ax2, esol[1].t, number_results.means, color=:black, linewidth=8, label=L\"$ $Discrete\")\nlines!(ax2, esol[1].t, pde_number_results, color=:red, linewidth=8, linestyle=:dash, label=L\"$ $Continuum\")\naxislegend(ax2, position=:rb)\nR_cont = q -> q * G(1 / q, Gp)\nq_range = LinRange(4, 8, 250)\nR_sol = reaction_basis.(q_range, Ref(eql_sol.reaction_theta), Ref(nothing))\nR_cont_sol = R_cont.(q_range)\nlines!(ax3, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax3, q_range, R_cont_sol, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax3, position=:rt)\nylims!(ax3, -0.001, 0.06)\nresize_to_layout!(fig)\nfig","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"","category":"page"},{"location":"supplementary_material/piecewise_prof/","page":"A Piecewise Proliferation Law","title":"A Piecewise Proliferation Law","text":"This page was generated using Literate.jl.","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/cs4b.jl\"","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cs4b.ipynb","category":"page"},{"location":"case_studies/cs4b/#Case-Studies:-Case-Study-4;-Inaccurate-continuum-limit","page":"Inaccurate continuum limit","title":"Case Studies: Case Study 4; Inaccurate continuum limit","text":"","category":"section"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"This example shows how we obtained the results in the paper for the fourth case study, for the case that the continuum limit is inaccurate. Let us load in the packages we will need.","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random","category":"page"},{"location":"case_studies/cs4b/#Simulating","page":"Inaccurate continuum limit","title":"Simulating","text":"","category":"section"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"Let us start by simulating the problem. We use the force law F(ell) = k(s-ell) and the proliferation law G(ell) = beta1 - 1(Kell).","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"final_time = 250.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nη = damping_constant\ns = resting_spring_length\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\ninterval_1 = (0.0, 2, 20)\ninterval_2 = (2, 10, 200)\ninterval_3 = (10.0, 20, 200)\ninterval_4 = (20, 50, 200)\nt = [0, 5, 25, 50, 100, 250]\nsaveat = [t\n             LinRange(interval_1...)\n             LinRange(interval_2...)\n             LinRange(interval_3...)\n             LinRange(interval_4...)] |> unique! |> sort!\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=saveat)","category":"page"},{"location":"case_studies/cs4b/#Equation-learning","page":"Inaccurate continuum limit","title":"Equation learning","text":"","category":"section"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"We now learn the equations, applying our sequential procedure.","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"diffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-1, -3)","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"(::BasisSet{Tuple{StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}}}) (generic function with 3 methods)","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"eql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    reaction_theta=zeros(5), moving_boundary_theta=zeros(3), rhs_theta=zeros(5),\n    mesh_points=100,\n    num_knots=50, threshold_tol=(dt=0.4,),\n    initial=:none, time_range=(interval_1[1], interval_1[2]))","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n┌──────┬──────────────────┬────────┐\n│ Step │  θ₁ᵈ   θ₂ᵈ   θ₃ᵈ │   Loss │\n├──────┼──────────────────┼────────┤\n│    1 │ 0.00  0.00  0.00 │ -16.64 │\n│    2 │ 0.00  0.21  0.00 │ -15.64 │\n└──────┴──────────────────┴────────┘","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"eql_sol_2 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    reaction_theta=zeros(5), rhs_theta=zeros(5),\n    mesh_points=100, threshold_tol=(dL=0.4,),\n    num_knots=100, initial=:none,\n    time_range=(interval_2[1], interval_2[2]))","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"┌──────┬──────────────────┬────────┐\n│ Step │  θ₁ᵉ   θ₂ᵉ   θ₃ᵉ │   Loss │\n├──────┼──────────────────┼────────┤\n│    1 │ 0.00  0.00  0.00 │ -11.24 │\n│    2 │ 0.00  0.23  0.00 │ -10.24 │\n└──────┴──────────────────┴────────┘","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"eql_sol_3 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta, reaction_theta=zeros(5),\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    mesh_points=100, num_knots=100,\n    initial=:none,\n    time_range=(interval_3[1], interval_3[2]))","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"StepwiseEQL Solution.\n    H(q) = θ₁ʰ ϕ₁ʰ(q) + θ₄ʰ ϕ₄ʰ(q)\n┌──────┬────────────────────────────────┬────────┐\n│ Step │   θ₁ʰ   θ₂ʰ   θ₃ʰ    θ₄ʰ   θ₅ʰ │   Loss │\n├──────┼────────────────────────────────┼────────┤\n│    1 │  0.00  0.00  0.00   0.00  0.00 │  -8.31 │\n│    2 │  0.00  0.00  0.00  -0.01  0.00 │ -11.25 │\n│    3 │ -0.15  0.00  0.00  -0.01  0.00 │ -12.31 │\n└──────┴────────────────────────────────┴────────┘","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"eql_sol_4 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    rhs_theta=eql_sol_3.rhs_theta, mesh_points=1000,\n    num_knots=100,\n    threshold_tol=(q=0.3,),\n    initial=:none, time_range=(interval_4[1], interval_4[2]))","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"StepwiseEQL Solution.\n    R(q) = θ₁ʳ ϕ₁ʳ(q) + θ₂ʳ ϕ₂ʳ(q)\n┌──────┬───────────────────────────────┬────────┐\n│ Step │  θ₁ʳ    θ₂ʳ   θ₃ʳ   θ₄ʳ   θ₅ʳ │   Loss │\n├──────┼───────────────────────────────┼────────┤\n│    1 │ 0.00   0.00  0.00  0.00  0.00 │  -9.40 │\n│    2 │ 0.00   0.00  0.00  0.00  0.00 │  -8.70 │\n│    3 │ 0.11  -0.01  0.00  0.00  0.00 │ -17.74 │\n└──────┴───────────────────────────────┴────────┘","category":"page"},{"location":"case_studies/cs4b/#Plotting","page":"Inaccurate continuum limit","title":"Plotting","text":"","category":"section"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"Now we plot our results.","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"fig = Figure(fontsize=81, resolution=(3250, 2070))\nax_pde = Axis(fig[1, 1],\n    xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15])\n)\nxlims!(ax_pde, 0, 10)\nylims!(ax_pde, 0, 20)\nax_leading_edge = Axis(fig[1, 2],\n    xlabel=L\"t\", ylabel=L\"L(t)\",\n    title=L\"(b):$ $ Leading edge comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:50:250, [L\"%$s\" for s in 0:50:250]),\n    yticks=(0:5:10, [L\"%$s\" for s in 0:5:10])\n)\nxlims!(ax_leading_edge, 0, 250)\nylims!(ax_leading_edge, 0, 10)\nax_dq = Axis(fig[2, 1],\n    xlabel=L\"q\", ylabel=L\"D(q)\",\n    title=L\"(c): $D(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0.0005:0.0025:0.01, [L\"%$s\" for s in 0.0005:0.0025:0.01])\n)\nq_min, q_max = extrema(stack(eql_sol_4.model.cell_sol.q))\nq_min = 5\nxlims!(ax_dq, q_min, q_max)\nylims!(ax_dq, 0.0005, 0.01)\nax_rq = Axis(fig[2, 2],\n    xlabel=L\"q\", ylabel=L\"R(q)\",\n    title=L\"(d): $R(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(-0.25:0.25:0.75, [L\"%$s\" for s in -0.25:0.25:0.75])\n)\nxlims!(ax_rq, q_min, q_max)\nylims!(ax_rq, -0.25, 0.75)\nax_hq = Axis(fig[3, 1],\n    xlabel=L\"q\", ylabel=L\"H(q)\",\n    title=L\"(e): $H(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(-24:6:0, [L\"%$s\" for s in -24:6:0])\n)\nxlims!(ax_hq, q_min, q_max)\nylims!(ax_hq, -24, 2)\nax_eq = Axis(fig[3, 2],\n    xlabel=L\"q\", ylabel=L\"E(q)\",\n    title=L\"(f): $E(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0.0005:0.0025:0.01, [L\"%$s\" for s in 0.0005:0.0025:0.01])\n)\nxlims!(ax_eq, q_min, q_max)\nylims!(ax_eq, 0.0005, 0.01)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\ncolors = (:black, :red, :blue, :green, :orange, :purple, :brown)\npde_ξ = eql_sol_4.pde.geometry.mesh_points\npde_L = eql_sol_4.pde_sol[end, :]\npde_q = eql_sol_4.pde_sol[begin:(end-1), :]\ncell_q = eql_sol_4.model.cell_sol.q\ncell_r = eql_sol_4.model.cell_sol.u\ncell_L = last.(eql_sol_4.model.cell_sol.u)\n\nq_range = LinRange(q_min, q_max, 100)\nD_cont_fnc = q -> (k / η) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nH_cont_fnc = q -> 2q^2 * (1 - q * s)\nE_cont_fnc = D_cont_fnc\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nH_cont = H_cont_fnc.(q_range)\nE_cont = E_cont_fnc.(q_range)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol_4.reaction_theta), Ref(nothing))\nH_sol = rhs_basis.(q_range, Ref(eql_sol_3.rhs_theta), Ref(nothing))\nE_sol = moving_boundary_basis.(q_range, Ref(eql_sol_2.moving_boundary_theta), Ref(nothing))\n\nfor (j, i) in enumerate(time_indices)\n    lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax_pde, [5.0], [3.0], [3.0], [0.0], color=:black, linewidth=12, arrowsize=57)\ntext!(ax_pde, [7.0], [3.5], text=L\"t\", fontsize=81)\n\nlines!(ax_leading_edge, esol[1].t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\nlines!(ax_leading_edge, esol[1].t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\naxislegend(ax_leading_edge, position=:rb)\n\nlines!(ax_dq, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_dq, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_dq, position=:rt)\n\nlines!(ax_rq, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_rq, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\nhlines!(ax_rq, [0.0], color=:grey, linewidth=12, linestyle=:dash)\naxislegend(ax_rq, position=:lb)\n\nlines!(ax_hq, q_range, H_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_hq, q_range, H_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_hq, position=:rt)\n\nlines!(ax_eq, q_range, E_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_eq, q_range, E_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_eq, position=:rt)\nfig","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"<figure>\n    <img src='figure11.png', alt='Figure 11 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs4b/#Just-the-code","page":"Inaccurate continuum limit","title":"Just the code","text":"","category":"section"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random\n\nfinal_time = 250.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nη = damping_constant\ns = resting_spring_length\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\ninterval_1 = (0.0, 2, 20)\ninterval_2 = (2, 10, 200)\ninterval_3 = (10.0, 20, 200)\ninterval_4 = (20, 50, 200)\nt = [0, 5, 25, 50, 100, 250]\nsaveat = [t\n             LinRange(interval_1...)\n             LinRange(interval_2...)\n             LinRange(interval_3...)\n             LinRange(interval_4...)] |> unique! |> sort!\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=saveat)\n\ndiffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-1, -3)\n\neql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    reaction_theta=zeros(5), moving_boundary_theta=zeros(3), rhs_theta=zeros(5),\n    mesh_points=100,\n    num_knots=50, threshold_tol=(dt=0.4,),\n    initial=:none, time_range=(interval_1[1], interval_1[2]))\n\neql_sol_2 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    reaction_theta=zeros(5), rhs_theta=zeros(5),\n    mesh_points=100, threshold_tol=(dL=0.4,),\n    num_knots=100, initial=:none,\n    time_range=(interval_2[1], interval_2[2]))\n\neql_sol_3 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta, reaction_theta=zeros(5),\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    mesh_points=100, num_knots=100,\n    initial=:none,\n    time_range=(interval_3[1], interval_3[2]))\n\neql_sol_4 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    rhs_theta=eql_sol_3.rhs_theta, mesh_points=1000,\n    num_knots=100,\n    threshold_tol=(q=0.3,),\n    initial=:none, time_range=(interval_4[1], interval_4[2]))\n\nfig = Figure(fontsize=81, resolution=(3250, 2070))\nax_pde = Axis(fig[1, 1],\n    xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15])\n)\nxlims!(ax_pde, 0, 10)\nylims!(ax_pde, 0, 20)\nax_leading_edge = Axis(fig[1, 2],\n    xlabel=L\"t\", ylabel=L\"L(t)\",\n    title=L\"(b):$ $ Leading edge comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:50:250, [L\"%$s\" for s in 0:50:250]),\n    yticks=(0:5:10, [L\"%$s\" for s in 0:5:10])\n)\nxlims!(ax_leading_edge, 0, 250)\nylims!(ax_leading_edge, 0, 10)\nax_dq = Axis(fig[2, 1],\n    xlabel=L\"q\", ylabel=L\"D(q)\",\n    title=L\"(c): $D(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0.0005:0.0025:0.01, [L\"%$s\" for s in 0.0005:0.0025:0.01])\n)\nq_min, q_max = extrema(stack(eql_sol_4.model.cell_sol.q))\nq_min = 5\nxlims!(ax_dq, q_min, q_max)\nylims!(ax_dq, 0.0005, 0.01)\nax_rq = Axis(fig[2, 2],\n    xlabel=L\"q\", ylabel=L\"R(q)\",\n    title=L\"(d): $R(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(-0.25:0.25:0.75, [L\"%$s\" for s in -0.25:0.25:0.75])\n)\nxlims!(ax_rq, q_min, q_max)\nylims!(ax_rq, -0.25, 0.75)\nax_hq = Axis(fig[3, 1],\n    xlabel=L\"q\", ylabel=L\"H(q)\",\n    title=L\"(e): $H(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(-24:6:0, [L\"%$s\" for s in -24:6:0])\n)\nxlims!(ax_hq, q_min, q_max)\nylims!(ax_hq, -24, 2)\nax_eq = Axis(fig[3, 2],\n    xlabel=L\"q\", ylabel=L\"E(q)\",\n    title=L\"(f): $E(q)$ comparison\",\n    titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0.0005:0.0025:0.01, [L\"%$s\" for s in 0.0005:0.0025:0.01])\n)\nxlims!(ax_eq, q_min, q_max)\nylims!(ax_eq, 0.0005, 0.01)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\ncolors = (:black, :red, :blue, :green, :orange, :purple, :brown)\npde_ξ = eql_sol_4.pde.geometry.mesh_points\npde_L = eql_sol_4.pde_sol[end, :]\npde_q = eql_sol_4.pde_sol[begin:(end-1), :]\ncell_q = eql_sol_4.model.cell_sol.q\ncell_r = eql_sol_4.model.cell_sol.u\ncell_L = last.(eql_sol_4.model.cell_sol.u)\n\nq_range = LinRange(q_min, q_max, 100)\nD_cont_fnc = q -> (k / η) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nH_cont_fnc = q -> 2q^2 * (1 - q * s)\nE_cont_fnc = D_cont_fnc\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nH_cont = H_cont_fnc.(q_range)\nE_cont = E_cont_fnc.(q_range)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol_4.reaction_theta), Ref(nothing))\nH_sol = rhs_basis.(q_range, Ref(eql_sol_3.rhs_theta), Ref(nothing))\nE_sol = moving_boundary_basis.(q_range, Ref(eql_sol_2.moving_boundary_theta), Ref(nothing))\n\nfor (j, i) in enumerate(time_indices)\n    lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax_pde, [5.0], [3.0], [3.0], [0.0], color=:black, linewidth=12, arrowsize=57)\ntext!(ax_pde, [7.0], [3.5], text=L\"t\", fontsize=81)\n\nlines!(ax_leading_edge, esol[1].t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\nlines!(ax_leading_edge, esol[1].t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\naxislegend(ax_leading_edge, position=:rb)\n\nlines!(ax_dq, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_dq, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_dq, position=:rt)\n\nlines!(ax_rq, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_rq, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\nhlines!(ax_rq, [0.0], color=:grey, linewidth=12, linestyle=:dash)\naxislegend(ax_rq, position=:lb)\n\nlines!(ax_hq, q_range, H_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_hq, q_range, H_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_hq, position=:rt)\n\nlines!(ax_eq, q_range, E_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_eq, q_range, E_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_eq, position=:rt)\nfig","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"","category":"page"},{"location":"case_studies/cs4b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/cs3b.jl\"","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cs3b.ipynb","category":"page"},{"location":"case_studies/cs3b/#Case-Studies:-Case-Study-3;-Inaccurate-continuum-limit","page":"Inaccurate continuum limit","title":"Case Studies: Case Study 3; Inaccurate continuum limit","text":"","category":"section"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"This example shows how we obtained the results in the paper for the third case study, for the case that the continuum limit is inaccurate. Let us load in the packages we will need.","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random","category":"page"},{"location":"case_studies/cs3b/#Simulating","page":"Inaccurate continuum limit","title":"Simulating","text":"","category":"section"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"We start by simulating the results.","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"final_time = 75.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=0.1);","category":"page"},{"location":"case_studies/cs3b/#Equation-learning","page":"Inaccurate continuum limit","title":"Equation learning","text":"","category":"section"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"We now learn the equations.","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"diffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)\neql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    threshold_tol=(q=0.25,), mesh_points=1000,\n    initial=:none, num_knots=200)","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n    R(q) = θ₁ʳ ϕ₁ʳ(q) + θ₂ʳ ϕ₂ʳ(q) + θ₃ʳ ϕ₃ʳ(q) + θ₄ʳ ϕ₄ʳ(q)\n┌──────┬──────────────────┬────────────────────────────────────────┬───────┐\n│ Step │  θ₁ᵈ   θ₂ᵈ   θ₃ᵈ │  θ₁ʳ    θ₂ʳ       θ₃ʳ        θ₄ʳ   θ₅ʳ │  Loss │\n├──────┼──────────────────┼────────────────────────────────────────┼───────┤\n│    1 │ 0.00  0.00  0.00 │ 0.00   0.00      0.00       0.00  0.00 │ -0.33 │\n│    2 │ 0.00  0.00  0.00 │ 0.02   0.00      0.00       0.00  0.00 │  0.51 │\n│    3 │ 0.00  0.00  0.00 │ 0.11  -0.01      0.00       0.00  0.00 │  0.20 │\n│    4 │ 0.00  0.11  0.00 │ 0.11  -0.01      0.00       0.00  0.00 │ -0.04 │\n│    5 │ 0.00  0.12  0.00 │ 0.13  -0.01  1.59e-04       0.00  0.00 │ -0.46 │\n│    6 │ 0.00  0.12  0.00 │ 0.16  -0.02  7.49e-04  -1.69e-05  0.00 │ -1.13 │\n└──────┴──────────────────┴────────────────────────────────────────┴───────┘","category":"page"},{"location":"case_studies/cs3b/#Plotting","page":"Inaccurate continuum limit","title":"Plotting","text":"","category":"section"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"We plot the results as follows. To improve the plot visually, we need to recompute the AveragedODESolution so that there are more knots.","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"avg_sol = AveragedODESolution(esol, 500)\nfig = Figure(fontsize=45, resolution=(1550, 961))\nax = Axis(fig[1, 1:2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=1375, height=300,\n    title=L\"(a):$ $ Density comparison\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\nt = (0, 1, 10, 25, 40, 75)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\nfor (j, i) in enumerate(time_indices)\n    lines!(ax, eql_sol.pde.geometry.mesh_points, eql_sol.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax, avg_sol.u[i], avg_sol.q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax, [15.0], [3.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=50)\ntext!(ax, [15.5], [5.7], text=L\"t\", color=:black, fontsize=47)\nxlims!(ax, 0, 30)\nylims!(ax, 0, 23)\nax2 = Axis(fig[2, 1],xlabel=L\"q\",ylabel=L\"D(q)\",\n    width=600,height=300,\ntitle=L\"(b): $D(q)$ comparison\",titlealign=:left,\n    xticks=(0:1:3, [L\"%$s\" for s in 0:1:3]),\n    yticks=(0:2:8, [L\"%$s\" for s in 0:2:8]))\nq_range = LinRange(1 / 10, 20, 500)\nD_cont_fnc = q -> (force_law_parameters.k / damping_constant) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol.reaction_theta), Ref(nothing))\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nlines!(ax2, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax2, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nax3 = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    width=600, height=300,\n    title=L\"(c): $R(q)$ comparison\",titlealign=:left,\n    xticks=(0:3:18, [L\"%$s\" for s in 0:3:20]),\n    yticks=(-0.5:0.5:1.5, [L\"%$s\" for s in -0.5:0.5:1.5]))\nlines!(ax3, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax3, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\nhlines!(ax3, [0.0], color=:grey, linewidth=6, linestyle=:dash)\naxislegend(position=:lt)\nylims!(ax2, 0, 8)\nylims!(ax3, -0.5, 1.5)\nxlims!(ax2, 0, 3)\nxlims!(ax3, 0, 18)\nfig","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"<figure>\n    <img src='figure9.png', alt='Figure 9 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs3b/#Just-the-code","page":"Inaccurate continuum limit","title":"Just the code","text":"","category":"section"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random\n\nfinal_time = 75.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=0.1)\n\ndiffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)\neql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    threshold_tol=(q=0.25,), mesh_points=1000,\n    initial=:none, num_knots=200)\n\navg_sol = AveragedODESolution(esol, 500)\nfig = Figure(fontsize=45, resolution=(1550, 961))\nax = Axis(fig[1, 1:2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=1375, height=300,\n    title=L\"(a):$ $ Density comparison\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\nt = (0, 1, 10, 25, 40, 75)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\nfor (j, i) in enumerate(time_indices)\n    lines!(ax, eql_sol.pde.geometry.mesh_points, eql_sol.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax, avg_sol.u[i], avg_sol.q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax, [15.0], [3.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=50)\ntext!(ax, [15.5], [5.7], text=L\"t\", color=:black, fontsize=47)\nxlims!(ax, 0, 30)\nylims!(ax, 0, 23)\nax2 = Axis(fig[2, 1],xlabel=L\"q\",ylabel=L\"D(q)\",\n    width=600,height=300,\ntitle=L\"(b): $D(q)$ comparison\",titlealign=:left,\n    xticks=(0:1:3, [L\"%$s\" for s in 0:1:3]),\n    yticks=(0:2:8, [L\"%$s\" for s in 0:2:8]))\nq_range = LinRange(1 / 10, 20, 500)\nD_cont_fnc = q -> (force_law_parameters.k / damping_constant) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol.reaction_theta), Ref(nothing))\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nlines!(ax2, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax2, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nax3 = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    width=600, height=300,\n    title=L\"(c): $R(q)$ comparison\",titlealign=:left,\n    xticks=(0:3:18, [L\"%$s\" for s in 0:3:20]),\n    yticks=(-0.5:0.5:1.5, [L\"%$s\" for s in -0.5:0.5:1.5]))\nlines!(ax3, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax3, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\nhlines!(ax3, [0.0], color=:grey, linewidth=6, linestyle=:dash)\naxislegend(position=:lt)\nylims!(ax2, 0, 8)\nylims!(ax3, -0.5, 1.5)\nxlims!(ax2, 0, 3)\nxlims!(ax3, 0, 18)\nfig","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"","category":"page"},{"location":"case_studies/cs3b/","page":"Inaccurate continuum limit","title":"Inaccurate continuum limit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/cs3a.jl\"","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cs3a.ipynb","category":"page"},{"location":"case_studies/cs3a/#Case-Studies:-Case-Study-3;-Accurate-continuum-limit","page":"Accurate continuum limit","title":"Case Studies: Case Study 3; Accurate continuum limit","text":"","category":"section"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"This example shows how we obtained the results in the paper for the third case study, for the case that the continuum limit is accurate. Let us load in the packages we will need.","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random","category":"page"},{"location":"case_studies/cs3a/#Simulating","page":"Accurate continuum limit","title":"Simulating","text":"","category":"section"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"Let us start by defining the cell problem. We use the force law F(ell) = k(s-ell) and the proliferation law G(ell) = beta1 - 1(Kell).","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"final_time = 50.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"Before we solve the problem, we note that the stochastic nature of the proliferation mechanism implies that the results are not deterministic. To make the results deterministic, we disable multithreading by providing EnsembleSerial().","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"ens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=0.1);","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"If you do not care about the non-deterministic behaviour and just want a fast result, just do not provide the third argument.","category":"page"},{"location":"case_studies/cs3a/#Equation-learning","page":"Accurate continuum limit","title":"Equation learning","text":"","category":"section"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"We now learn the equations. The basis expansison we use are:","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"diffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"(::BasisSet{NTuple{5, StepwiseEQL.var\"#52#54\"{Int64}}}) (generic function with 3 methods)","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"To learn the equations, we use the call below. We use 50 knots for averaging, and prune with tau_q = 01.","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"eql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    threshold_tol=(q=0.1,), mesh_points=1000,\n    initial=:all, num_knots=50)","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n    R(q) = θ₁ʳ ϕ₁ʳ(q) + θ₂ʳ ϕ₂ʳ(q)\n┌──────┬─────────────────────────┬──────────────────────────────────────────────┬───────┐\n│ Step │    θ₁ᵈ     θ₂ᵈ      θ₃ᵈ │  θ₁ʳ    θ₂ʳ        θ₃ʳ        θ₄ʳ        θ₅ʳ │  Loss │\n├──────┼─────────────────────────┼──────────────────────────────────────────────┼───────┤\n│    1 │ -11.66  147.43  -191.51 │ 0.13  -0.00      -0.00   5.83e-05  -1.13e-06 │   Inf │\n│    2 │  -2.24   60.86     0.00 │ 0.13  -0.00  -5.72e-04   2.62e-05  -3.49e-07 │ -0.71 │\n│    3 │  -2.25   60.90     0.00 │ 0.14  -0.01       0.00  -1.25e-05   5.95e-07 │ -1.92 │\n│    4 │   0.00   52.95     0.00 │ 0.14  -0.01       0.00  -1.36e-05   6.49e-07 │ -3.35 │\n│    5 │   0.00   53.02     0.00 │ 0.15  -0.01       0.00       0.00   3.23e-08 │ -4.98 │\n│    6 │   0.00   52.97     0.00 │ 0.15  -0.01       0.00       0.00       0.00 │ -5.70 │\n└──────┴─────────────────────────┴──────────────────────────────────────────────┴───────┘","category":"page"},{"location":"case_studies/cs3a/#Plotting","page":"Accurate continuum limit","title":"Plotting","text":"","category":"section"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"We plot the results as follows. To improve the plot visually, we need to recompute the AveragedODESolution so that there are more knots, since 50 leads to a jagged plot.","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"asol = AveragedODESolution(esol, 500) # 500 knots\nfig = Figure(fontsize=45, resolution=(1510, 961))\nax = Axis(fig[1, 1:2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=1350, height=300,\n    title=L\"(a):$ $ Density comparison\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\nt = (0, 1, 5, 10, 20, 50)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\nfor (j, i) in enumerate(time_indices)\n    lines!(ax, eql_sol.pde.geometry.mesh_points, eql_sol.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax, asol.u[i], asol.q[i], color=colors[j], linewidth=4)\nend\narrows!(ax, [15.0], [3.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=50)\ntext!(ax, [15.5], [7.0], text=L\"t\", color=:black, fontsize=47)\nxlims!(ax, 0, 30)\nylims!(ax, 0, 16)\nax2 = Axis(fig[2, 1], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=600, height=300,\n    title=L\"(b): $D(q)$ comparison\", titlealign=:left,\n    xticks=(0:5:15, [L\"%$s\" for s in 0:5:15]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\nq_range = LinRange(1 / 10, 15, 250)\nD_cont_fnc = q -> (force_law_parameters.k / damping_constant) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol.reaction_theta), Ref(nothing))\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nlines!(ax2, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax2, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nax3 = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    width=600, height=300,\n    title=L\"(c): $R(q)$ comparison\", titlealign=:left,\n    xticks=(0:5:15, [L\"%$s\" for s in 0:5:15]),\n    yticks=(0:0.5:1.5, [L\"%$s\" for s in 0:0.5:1.5]))\nlines!(ax3, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax3, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nylims!(ax2, 0, 20)\nylims!(ax3, 0, 1)\nxlims!(ax2, 0, 15)\nxlims!(ax3, 0, 15)\nfig","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"<figure>\n    <img src='figure8.png', alt='Figure 8 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs3a/#Just-the-code","page":"Accurate continuum limit","title":"Just the code","text":"","category":"section"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random\n\nfinal_time = 50.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp);\n\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=0.1)\n\ndiffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)\n\neql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    threshold_tol=(q=0.1,), mesh_points=1000,\n    initial=:all, num_knots=50)\n\nasol = AveragedODESolution(esol, 500) # 500 knots\nfig = Figure(fontsize=45, resolution=(1510, 961))\nax = Axis(fig[1, 1:2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=1350, height=300,\n    title=L\"(a):$ $ Density comparison\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\nt = (0, 1, 5, 10, 20, 50)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\nfor (j, i) in enumerate(time_indices)\n    lines!(ax, eql_sol.pde.geometry.mesh_points, eql_sol.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax, asol.u[i], asol.q[i], color=colors[j], linewidth=4)\nend\narrows!(ax, [15.0], [3.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=50)\ntext!(ax, [15.5], [7.0], text=L\"t\", color=:black, fontsize=47)\nxlims!(ax, 0, 30)\nylims!(ax, 0, 16)\nax2 = Axis(fig[2, 1], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=600, height=300,\n    title=L\"(b): $D(q)$ comparison\", titlealign=:left,\n    xticks=(0:5:15, [L\"%$s\" for s in 0:5:15]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\nq_range = LinRange(1 / 10, 15, 250)\nD_cont_fnc = q -> (force_law_parameters.k / damping_constant) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol.reaction_theta), Ref(nothing))\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nlines!(ax2, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax2, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nax3 = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    width=600, height=300,\n    title=L\"(c): $R(q)$ comparison\", titlealign=:left,\n    xticks=(0:5:15, [L\"%$s\" for s in 0:5:15]),\n    yticks=(0:0.5:1.5, [L\"%$s\" for s in 0:0.5:1.5]))\nlines!(ax3, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax3, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nylims!(ax2, 0, 20)\nylims!(ax3, 0, 1)\nxlims!(ax2, 0, 15)\nxlims!(ax3, 0, 15)\nfig","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"","category":"page"},{"location":"case_studies/cs3a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/figure_3.jl\"","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"tip: Tip\nThis example is also available as a Jupyter notebook: figure_3.ipynb","category":"page"},{"location":"case_studies/figure_3/#Reproducing-Figure-3","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"","category":"section"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"Case studies 3 and 4 also discuss cases where the continuum limit is inaccurate. Figure 3 in the paper summarises these cases, and we reproduce this figure below. First, we load in the packages we will need.","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing StatsBase","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"The part of the figure involving the third case study is produced below.","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"# Case study 3\nfig = Figure(fontsize=41)\nfinal_time = 75.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 1e-2\nG = (δ, p) -> max(zero(δ), p.β * p.K * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(123)\ntimes = [0.0, 1.0, 10.0, 25.0, 40.0, 75.0]\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=times)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol)\nfvm_prob = continuum_limit(prob, 2500, proliferation=true)\nfvm_sol = solve(fvm_prob, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\nfig = Figure(fontsize=33)\nax = Axis(fig[1, 1],xlabel=L\"x\",ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ Case study 3\",titlealign=:left,\n    width=1200,height=300,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\ncolors = (:black, :red, :blue, :green, :orange, :purple)\nall_lines = []\nfor i in eachindex(esol[1])\n    line = lines!(ax, knots[i], means[i], color=colors[i], linewidth=5)\n    push!(all_lines, line)\n    lines!(ax, fvm_prob.geometry.mesh_points, fvm_sol.u[i], color=colors[i], linestyle=:dash, linewidth=8)\nend\narrows!(ax, [15.0], [5.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=50)\ntext!(ax, [15.5], [7.0], text=L\"t\", color=:black, fontsize=47)\nresize_to_layout!(fig)\ntightlimits!(ax)\nylims!(ax, 0, 20)\nresize_to_layout!(fig)","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"The part of the figure involving the third case study is produced below.","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"# Case study 4\nfinal_time = 250.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> max(zero(δ), p.β * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false)\nens_prob = EnsembleProblem(prob)\ntimes = [0, 5, 25, 50, 100, 250]\nRandom.seed!(123)\nesol = solve(ens_prob, Tsit5(); trajectories=1000, saveat=times)\npde = continuum_limit(prob, 2500, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol, stat=mean, extrapolate=true)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in times]\nax21 = Axis(fig[2, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(b):$ $ Case study 4\", titlealign=:left,\n    width=1200, height=300, halign=:left,\n    xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\narrows!(ax21, [5.0], [3.0], [3.0], [0.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax21, [7.0], [3.5], text=L\"t\", fontsize=47)\n@views for (j, i) in enumerate(time_indices)\n    lines!(ax21, knots[i], means[i], color=colors[j], linewidth=5)\n    lines!(ax21, pde.geometry.mesh_points * pde_sol.u[i][end], pde_sol.u[i][begin:(end-1)], color=colors[j], linestyle=:dash, linewidth=8)\nend\ntightlimits!(ax21)\nxlims!(ax21, 0, 10)\nylims!(ax21, 0, 20.0)\nresize_to_layout!(fig)","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"With all this, we finally obtain the figure.","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"fig","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"<figure>\n    <img src='figure3.png', alt='Figure 3 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/figure_3/#Just-the-code","page":"Reproducing Figure 3","title":"Just the code","text":"","category":"section"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing StatsBase\n\n# Case study 3\nfig = Figure(fontsize=41)\nfinal_time = 75.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 1e-2\nG = (δ, p) -> max(zero(δ), p.β * p.K * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(123)\ntimes = [0.0, 1.0, 10.0, 25.0, 40.0, 75.0]\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=times)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol)\nfvm_prob = continuum_limit(prob, 2500, proliferation=true)\nfvm_sol = solve(fvm_prob, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\nfig = Figure(fontsize=33)\nax = Axis(fig[1, 1],xlabel=L\"x\",ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ Case study 3\",titlealign=:left,\n    width=1200,height=300,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\ncolors = (:black, :red, :blue, :green, :orange, :purple)\nall_lines = []\nfor i in eachindex(esol[1])\n    line = lines!(ax, knots[i], means[i], color=colors[i], linewidth=5)\n    push!(all_lines, line)\n    lines!(ax, fvm_prob.geometry.mesh_points, fvm_sol.u[i], color=colors[i], linestyle=:dash, linewidth=8)\nend\narrows!(ax, [15.0], [5.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=50)\ntext!(ax, [15.5], [7.0], text=L\"t\", color=:black, fontsize=47)\nresize_to_layout!(fig)\ntightlimits!(ax)\nylims!(ax, 0, 20)\nresize_to_layout!(fig);\n\n# Case study 4\nfinal_time = 250.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> max(zero(δ), p.β * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false)\nens_prob = EnsembleProblem(prob)\ntimes = [0, 5, 25, 50, 100, 250]\nRandom.seed!(123)\nesol = solve(ens_prob, Tsit5(); trajectories=1000, saveat=times)\npde = continuum_limit(prob, 2500, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol, stat=mean, extrapolate=true)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in times]\nax21 = Axis(fig[2, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(b):$ $ Case study 4\", titlealign=:left,\n    width=1200, height=300, halign=:left,\n    xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]),\n    yticks=(0:5:20, [L\"%$s\" for s in 0:5:20]))\narrows!(ax21, [5.0], [3.0], [3.0], [0.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax21, [7.0], [3.5], text=L\"t\", fontsize=47)\n@views for (j, i) in enumerate(time_indices)\n    lines!(ax21, knots[i], means[i], color=colors[j], linewidth=5)\n    lines!(ax21, pde.geometry.mesh_points * pde_sol.u[i][end], pde_sol.u[i][begin:(end-1)], color=colors[j], linestyle=:dash, linewidth=8)\nend\ntightlimits!(ax21)\nxlims!(ax21, 0, 10)\nylims!(ax21, 0, 20.0)\nresize_to_layout!(fig);\n\nfig","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"","category":"page"},{"location":"case_studies/figure_3/","page":"Reproducing Figure 3","title":"Reproducing Figure 3","text":"This page was generated using Literate.jl.","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/cs4a.jl\"","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cs4a.ipynb","category":"page"},{"location":"case_studies/cs4a/#Case-Studies:-Case-Study-4;-Accurate-continuum-limit","page":"Accurate continuum limit","title":"Case Studies: Case Study 4; Accurate continuum limit","text":"","category":"section"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"This example shows how we obtained the results in the paper for the fourth case study, for the case that the continuum limit is accurate. Let us load in the packages we will need.","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random","category":"page"},{"location":"case_studies/cs4a/#Simulating","page":"Accurate continuum limit","title":"Simulating","text":"","category":"section"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"Let us start by defining the cell problem. We use the force law F(ell) = k(s-ell) and the proliferation law G(ell) = beta1 - 1(Kell).","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"final_time = 100.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nη = damping_constant\ns = resting_spring_length\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false);","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"To now consider solving the problem, we note that we apply a sequential procedure to this problem, learning mechanisms one at a time. Thus, we provide a set of intervals for each mechanism. These are Tuples of the form (tmin, tmax, n), indicating that the mechanisms are to be learned over tmin ≤ t ≤ tmax, saving at n equally spaced time points between the endpoints.","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"ens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\ninterval_1 = (0.0, 0.1, 25)\ninterval_2 = (0.0, 5.0, 50)\ninterval_3 = (5.0, 10.0, 100)\ninterval_4 = (10, 50, 250)\nt = [0, 5, 10, 25, 50, 100]\nsaveat = [t\n             LinRange(interval_1...)\n             LinRange(interval_2...)\n             LinRange(interval_3...)\n             LinRange(interval_4...)] |> unique! |> sort!\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=saveat);","category":"page"},{"location":"case_studies/cs4a/#Equation-learning","page":"Accurate continuum limit","title":"Equation learning","text":"","category":"section"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"We now learn the equations. The basis sets we use are:","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"diffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-1, -3)","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"(::BasisSet{Tuple{StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}}}) (generic function with 3 methods)","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"To now learn the equations, we apply stepwise_selection to one mechanism one at a time, providing vectors of zeros to the fixed mechanisms so that they remain fixed at the zero function.","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"eql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    reaction_theta=zeros(5), moving_boundary_theta=zeros(3), rhs_theta=zeros(5),\n    mesh_points=100, num_knots=25, threshold_tol=(q=0.1,),\n    initial=:none, time_range=(interval_1[1], interval_1[2]))","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n┌──────┬───────────────────┬────────┐\n│ Step │  θ₁ᵈ    θ₂ᵈ   θ₃ᵈ │   Loss │\n├──────┼───────────────────┼────────┤\n│    1 │ 0.00   0.00  0.00 │ -12.94 │\n│    2 │ 0.00  49.60  0.00 │ -11.94 │\n└──────┴───────────────────┴────────┘","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"eql_sol_2 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    reaction_theta=zeros(5), rhs_theta=zeros(5),\n    mesh_points=100, threshold_tol=(dL=0.2,),\n    num_knots=50, initial=:none,\n    time_range=(interval_2[1], interval_2[2]))","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"StepwiseEQL Solution.\n    E(q) = θ₂ᵉ ϕ₂ᵉ(q)\n┌──────┬───────────────────┬───────┐\n│ Step │  θ₁ᵉ    θ₂ᵉ   θ₃ᵉ │  Loss │\n├──────┼───────────────────┼───────┤\n│    1 │ 0.00   0.00  0.00 │ -6.89 │\n│    2 │ 0.00  49.70  0.00 │ -5.89 │\n└──────┴───────────────────┴───────┘","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"eql_sol_3 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    reaction_theta=zeros(5),\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    mesh_points=100, num_knots=100,\n    initial=:none, time_range=(interval_3[1], interval_3[2]))","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"StepwiseEQL Solution.\n    H(q) = θ₁ʰ ϕ₁ʰ(q) + θ₄ʰ ϕ₄ʰ(q)\n┌──────┬────────────────────────────────┬───────┐\n│ Step │   θ₁ʰ   θ₂ʰ   θ₃ʰ    θ₄ʰ   θ₅ʰ │  Loss │\n├──────┼────────────────────────────────┼───────┤\n│    1 │  0.00  0.00  0.00   0.00  0.00 │ -3.58 │\n│    2 │  0.00  0.00  0.00  -0.00  0.00 │ -7.70 │\n│    3 │ -0.01  0.00  0.00  -0.00  0.00 │ -7.76 │\n└──────┴────────────────────────────────┴───────┘","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"eql_sol_4 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    rhs_theta=eql_sol_3.rhs_theta,\n    mesh_points=100, num_knots=50,\n    initial=:none,\n    time_range=(interval_4[1], interval_4[2]))","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"StepwiseEQL Solution.\n    R(q) = θ₁ʳ ϕ₁ʳ(q) + θ₂ʳ ϕ₂ʳ(q)\n┌──────┬───────────────────────────────┬────────┐\n│ Step │  θ₁ʳ    θ₂ʳ   θ₃ʳ   θ₄ʳ   θ₅ʳ │   Loss │\n├──────┼───────────────────────────────┼────────┤\n│    1 │ 0.00   0.00  0.00  0.00  0.00 │  -4.23 │\n│    2 │ 0.03   0.00  0.00  0.00  0.00 │  -4.52 │\n│    3 │ 0.15  -0.01  0.00  0.00  0.00 │ -13.75 │\n└──────┴───────────────────────────────┴────────┘","category":"page"},{"location":"case_studies/cs4a/#Plotting","page":"Accurate continuum limit","title":"Plotting","text":"","category":"section"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"We now plot our results.","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"fig = Figure(fontsize=81, resolution=(3250, 2070))\nax_pde = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15])\n)\nxlims!(ax_pde, 0, 35)\nylims!(ax_pde, 0, 16)\nax_leading_edge = Axis(fig[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\",\n    title=L\"(b):$ $ Leading edge comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:20:100, [L\"%$s\" for s in 0:20:100]),\n    yticks=(0:10:40, [L\"%$s\" for s in 0:10:40])\n)\nxlims!(ax_leading_edge, 0, 100)\nylims!(ax_leading_edge, 0, 40)\nax_dq = Axis(fig[2, 1], xlabel=L\"q\", ylabel=L\"D(q)\",\n    title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0:2, [L\"%$s\" for s in 0:2])\n)\nxlims!(ax_dq, 5, 15)\nylims!(ax_dq, 0, 2)\nax_rq = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    title=L\"(d): $R(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0:0.25:0.75, [L\"%$s\" for s in 0:0.25:0.75])\n)\nxlims!(ax_rq, 5, 15)\nylims!(ax_rq, 0, 0.75)\nax_hq = Axis(fig[3, 1], xlabel=L\"q\", ylabel=L\"H(q)\",\n    title=L\"(e): $H(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n        yticks=(-12:4:0, [L\"%$s\" for s in -12:4:0])\n)\nxlims!(ax_hq, 5, 15)\nylims!(ax_hq, -12, 0)\nax_eq = Axis(fig[3, 2], xlabel=L\"q\", ylabel=L\"E(q)\",\n    title=L\"(f): $E(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n        yticks=(0:0.5:2, [L\"%$s\" for s in 0:0.5:2])\n)\nxlims!(ax_eq, 5, 15)\nylims!(ax_eq, 0, 2)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\ncolors = (:black, :red, :blue, :green, :orange, :purple, :brown)\npde_ξ = eql_sol_4.pde.geometry.mesh_points\npde_L = eql_sol_4.pde_sol[end, :]\npde_q = eql_sol_4.pde_sol[begin:(end-1), :]\ncell_q = eql_sol_4.model.cell_sol.q\ncell_r = eql_sol_4.model.cell_sol.u\ncell_L = last.(eql_sol_4.model.cell_sol.u)\n\nq_range = LinRange(5, 15, 100)\nbc_q_range = LinRange(5, 5.8, 100)\nD_cont_fnc = q -> (k / η) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nH_cont_fnc = q -> 2q^2 * (1 - q * s)\nE_cont_fnc = D_cont_fnc\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nH_cont = H_cont_fnc.(q_range)\nE_cont = E_cont_fnc.(q_range)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol_4.reaction_theta), Ref(nothing))\nH_sol = rhs_basis.(q_range, Ref(eql_sol_3.rhs_theta), Ref(nothing))\nE_sol = moving_boundary_basis.(q_range, Ref(eql_sol_2.moving_boundary_theta), Ref(nothing))\n\nfor (j, i) in enumerate(time_indices)\n    lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax_pde, [13.0], [3.0], [13.0], [0.0], color=:black, linewidth=12, arrowsize=57)\ntext!(ax_pde, [22.0], [3.5], text=L\"t\", fontsize=81)\n\nlines!(ax_leading_edge, esol[1].t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\nlines!(ax_leading_edge, esol[1].t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\naxislegend(ax_leading_edge, position=:rb)\n\nlines!(ax_dq, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_dq, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_dq, position=:rt)\n\nlines!(ax_rq, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_rq, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_rq, position=:lb)\n\nlines!(ax_hq, q_range, H_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_hq, q_range, H_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_hq, position=:rt)\n\nlines!(ax_eq, q_range, E_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_eq, q_range, E_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_eq, position=:rt)\nfig","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"<figure>\n    <img src='figure10.png', alt='Figure 10 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs4a/#Just-the-code","page":"Accurate continuum limit","title":"Just the code","text":"","category":"section"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random\n\nfinal_time = 100.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nη = damping_constant\ns = resting_spring_length\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false)\n\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\ninterval_1 = (0.0, 0.1, 25)\ninterval_2 = (0.0, 5.0, 50)\ninterval_3 = (5.0, 10.0, 100)\ninterval_4 = (10, 50, 250)\nt = [0, 5, 10, 25, 50, 100]\nsaveat = [t\n             LinRange(interval_1...)\n             LinRange(interval_2...)\n             LinRange(interval_3...)\n             LinRange(interval_4...)] |> unique! |> sort!\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=saveat)\n\ndiffusion_basis = PolynomialBasis(-1, -3)\nreaction_basis = PolynomialBasis(1, 5)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-1, -3)\n\neql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    reaction_theta=zeros(5), moving_boundary_theta=zeros(3), rhs_theta=zeros(5),\n    mesh_points=100, num_knots=25, threshold_tol=(q=0.1,),\n    initial=:none, time_range=(interval_1[1], interval_1[2]))\n\neql_sol_2 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    reaction_theta=zeros(5), rhs_theta=zeros(5),\n    mesh_points=100, threshold_tol=(dL=0.2,),\n    num_knots=50, initial=:none,\n    time_range=(interval_2[1], interval_2[2]))\n\neql_sol_3 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    reaction_theta=zeros(5),\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    mesh_points=100, num_knots=100,\n    initial=:none, time_range=(interval_3[1], interval_3[2]))\n\neql_sol_4 = stepwise_selection(esol; diffusion_basis, reaction_basis,\n    rhs_basis, moving_boundary_basis,\n    diffusion_theta=eql_sol.diffusion_theta,\n    moving_boundary_theta=eql_sol_2.moving_boundary_theta,\n    rhs_theta=eql_sol_3.rhs_theta,\n    mesh_points=100, num_knots=50,\n    initial=:none,\n    time_range=(interval_4[1], interval_4[2]))\n\nfig = Figure(fontsize=81, resolution=(3250, 2070))\nax_pde = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15])\n)\nxlims!(ax_pde, 0, 35)\nylims!(ax_pde, 0, 16)\nax_leading_edge = Axis(fig[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\",\n    title=L\"(b):$ $ Leading edge comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:20:100, [L\"%$s\" for s in 0:20:100]),\n    yticks=(0:10:40, [L\"%$s\" for s in 0:10:40])\n)\nxlims!(ax_leading_edge, 0, 100)\nylims!(ax_leading_edge, 0, 40)\nax_dq = Axis(fig[2, 1], xlabel=L\"q\", ylabel=L\"D(q)\",\n    title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0:2, [L\"%$s\" for s in 0:2])\n)\nxlims!(ax_dq, 5, 15)\nylims!(ax_dq, 0, 2)\nax_rq = Axis(fig[2, 2], xlabel=L\"q\", ylabel=L\"R(q)\",\n    title=L\"(d): $R(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n    yticks=(0:0.25:0.75, [L\"%$s\" for s in 0:0.25:0.75])\n)\nxlims!(ax_rq, 5, 15)\nylims!(ax_rq, 0, 0.75)\nax_hq = Axis(fig[3, 1], xlabel=L\"q\", ylabel=L\"H(q)\",\n    title=L\"(e): $H(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n        yticks=(-12:4:0, [L\"%$s\" for s in -12:4:0])\n)\nxlims!(ax_hq, 5, 15)\nylims!(ax_hq, -12, 0)\nax_eq = Axis(fig[3, 2], xlabel=L\"q\", ylabel=L\"E(q)\",\n    title=L\"(f): $E(q)$ comparison\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(5:5:15, [L\"%$s\" for s in 5:5:15]),\n        yticks=(0:0.5:2, [L\"%$s\" for s in 0:0.5:2])\n)\nxlims!(ax_eq, 5, 15)\nylims!(ax_eq, 0, 2)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in t]\ncolors = (:black, :red, :blue, :green, :orange, :purple, :brown)\npde_ξ = eql_sol_4.pde.geometry.mesh_points\npde_L = eql_sol_4.pde_sol[end, :]\npde_q = eql_sol_4.pde_sol[begin:(end-1), :]\ncell_q = eql_sol_4.model.cell_sol.q\ncell_r = eql_sol_4.model.cell_sol.u\ncell_L = last.(eql_sol_4.model.cell_sol.u)\n\nq_range = LinRange(5, 15, 100)\nbc_q_range = LinRange(5, 5.8, 100)\nD_cont_fnc = q -> (k / η) / q^2\nR_cont_fnc = q -> β * q * (1 - q / K)\nH_cont_fnc = q -> 2q^2 * (1 - q * s)\nE_cont_fnc = D_cont_fnc\nD_cont = D_cont_fnc.(q_range)\nR_cont = R_cont_fnc.(q_range)\nH_cont = H_cont_fnc.(q_range)\nE_cont = E_cont_fnc.(q_range)\nD_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nR_sol = reaction_basis.(q_range, Ref(eql_sol_4.reaction_theta), Ref(nothing))\nH_sol = rhs_basis.(q_range, Ref(eql_sol_3.rhs_theta), Ref(nothing))\nE_sol = moving_boundary_basis.(q_range, Ref(eql_sol_2.moving_boundary_theta), Ref(nothing))\n\nfor (j, i) in enumerate(time_indices)\n    lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax_pde, [13.0], [3.0], [13.0], [0.0], color=:black, linewidth=12, arrowsize=57)\ntext!(ax_pde, [22.0], [3.5], text=L\"t\", fontsize=81)\n\nlines!(ax_leading_edge, esol[1].t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\nlines!(ax_leading_edge, esol[1].t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\naxislegend(ax_leading_edge, position=:rb)\n\nlines!(ax_dq, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_dq, q_range, D_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_dq, position=:rt)\n\nlines!(ax_rq, q_range, R_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_rq, q_range, R_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_rq, position=:lb)\n\nlines!(ax_hq, q_range, H_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_hq, q_range, H_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_hq, position=:rt)\n\nlines!(ax_eq, q_range, E_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\nlines!(ax_eq, q_range, E_cont, linewidth=6, color=:black, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(ax_eq, position=:rt)\nfig","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"","category":"page"},{"location":"case_studies/cs4a/","page":"Accurate continuum limit","title":"Accurate continuum limit","text":"This page was generated using Literate.jl.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/figure_2.jl\"","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"tip: Tip\nThis example is also available as a Jupyter notebook: figure_2.ipynb","category":"page"},{"location":"case_studies/figure_2/#Reproducing-Figure-2","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"","category":"section"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"The first four sections show results for the four case studies. Figure 2 of the paper shows the data used for these case studies, and the code below reproduces this figure. First, we load in the packages we need for the plots.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing StatsBase","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"The part of the figure involving the first case study is produced below.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"# Case study 1\nfig = Figure(fontsize=81, resolution=(3175, 2760))\nforce_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=50.0, s=0.2)\nfinal_time = 5.0\ndamping_constant = 1.0\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time,\n    damping_constant,\n    initial_condition)\nsol = solve(prob, Tsit5(), saveat=0.01)\npde = continuum_limit(prob, 2500, proliferation=false)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\nq = node_densities.(sol.u)\nq_stack = (vec ∘ stack)(q)\nr_stack = (vec ∘ stack)(sol.u)\nt_stack = repeat(sol.t, inner=length(initial_condition))\ntimes = [0, 1, 2, 3, 4, 5]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), sol.t) for τ in times]\nax11 = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(a):$ $ Case study 1\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5, [L\"%$s\" for s in 0:5]))\nax21 = Axis(fig[1, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(e):$ $ Case study 1\", titlealign=:left,\n    width=1200, height=400, halign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:2:6, [L\"%$s\" for s in 0:2:6]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=0:0.5:6, rasterize=true, extendhigh=:auto)\ntightlimits!(ax11)\nColorbar(fig[1, 0], hm11, width=50, flipaxis=false,  label=L\"q(x, t)\", ticks=(0:2:6, [L\"%$s\" for s in 0:2:6]), halign=:left)\nfor (j, i) in enumerate(time_indices)\n    lines!(ax21, sol.u[i], q[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=20)\nend\nxlims!(ax21, 0, 30)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 0, 6)\narrows!(ax21, [15.0, 23.0], [0.4, 3.0], [0.0, 4.0], [2.0, -2.0], color=:black, linewidth=8, arrowsize=57)\ntext!(ax21, [15.7, 28.0], [2.0, 0.7], text=[L\"t\", L\"t\"], color=:black, fontsize=81)","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"The part of the figure involving the second case study is produced below.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"# Case study 2\nforce_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=50.0, s=0.2)\nfinal_time = 100.0\ndamping_constant = 1.0\ninitial_condition = LinRange(0, 5, 60) |> collect\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time,\n    damping_constant,\n    initial_condition,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=0.1)\npde = continuum_limit(prob, 2500, proliferation=false)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\nq = node_densities.(sol.u)\nq_stack = (vec ∘ stack)(q)\nr_stack = (vec ∘ stack)(sol.u)\nt_stack = repeat(sol.t, inner=length(initial_condition))\ntimes = [0, 5, 10, 25, 50, 100]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), sol.t) for τ in times]\nax11 = Axis(fig[2, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(b):$ $ Case study 2\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:2:12, [L\"%$s\" for s in 0:2:12]),\n    yticks=(0:20:100, [L\"%$s\" for s in 0:20:100]))\nax21 = Axis(fig[2, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(f):$ $ Case study 2\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:2:12, [L\"%$s\" for s in 0:2:12]),\n    yticks=(5:4:13, [L\"%$s\" for s in 5:4:13]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=5:0.5:13, rasterize=true, extendhigh=:auto)\nColorbar(fig[2, 0], hm11,  width=50,flipaxis=false, label=L\"q(x, t)\", ticks=(5:2:13, [L\"%$s\" for s in 5:2:13]), halign=:left)\n@views for (j, i) in enumerate(time_indices)\n    lines!(ax21, sol.u[i], q[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points * pde_sol.u[i][end], pde_sol.u[i][begin:(end-1)], color=colors[j], linestyle=:dash, linewidth=20)\nend\nlines!(ax11, sol[end, :], sol.t, color=:red, linewidth=16)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 4.5, 13)\nxlims!(ax21, 0, 12)\nxlims!(ax11, 0, 12)\narrows!(ax21, [6.0], [12.0], [4.0], [-3.0], color=:black, linewidth=8, arrowsize=57)\ntext!(ax21, [8.0], [11.0], text=L\"t\", color=:black, fontsize=81)","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"The part of the figure involving the third case study is produced below.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"# Case study 3\nfinal_time = 50.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> max(zero(δ), p.β * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=0.1)\npde = continuum_limit(prob, 2500, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol; stat=mean, extrapolate=true)\nq_stack = (vec ∘ stack)(means)\nr_stack = (vec ∘ stack)(knots)\nt_stack = repeat(esol[1].t, inner=length(knots[1]))\ntimes = [0.0, 1.0, 5.0, 10.0, 20.0, 50.0]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in times]\nax11 = Axis(fig[3, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(c):$ $ Case study 3\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:10:50, [L\"%$s\" for s in 0:10:50]))\nax21 = Axis(fig[3, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(g):$ $ Case study 3\", titlealign=:left,\n    width=1200, height=400, halign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=0:1:15, rasterize=true, extendhigh=:auto)\ntightlimits!(ax11)\nColorbar(fig[3, 0], hm11,  width=50,flipaxis=false, label=L\"q(x, t)\", ticks=(0:5:15, [L\"%$s\" for s in 0:5:15]), halign=:left)\nfor (j, i) in enumerate(time_indices)\n    lines!(ax21, knots[i], means[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=20)\nend\nxlims!(ax21, 0, 30)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 0, 15.5)\narrows!(ax21, [15.0], [3.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=57)\ntext!(ax21, [15.5], [7.0], text=L\"t\", color=:black, fontsize=81)","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"The part of the figure involving the fourth case study is produced below.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"# Case study 4\nfinal_time = 100.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> max(zero(δ), p.β * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=100, saveat=0.1)\npde = continuum_limit(prob, 2500, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol, stat=mean, extrapolate=true)\nq_stack = (vec ∘ stack)(means)\nr_stack = (vec ∘ stack)(knots)\nt_stack = repeat(esol[1].t, inner=length(knots[1]))\ntimes = [0.0, 5.0, 10.0, 20.0, 50.0, 100.0]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in times]\nax11 = Axis(fig[4, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(d):$ $ Case study 4\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:25:100, [L\"%$s\" for s in 0:25:100]))\nax21 = Axis(fig[4, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(h):$ $ Case study 4\", titlealign=:left,\n    width=1200, height=400, halign=:left,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=0:1:15, rasterize=true, extendhigh=:auto)\nColorbar(fig[4, 0], hm11,  width=50,flipaxis=false, label=L\"q(x, t)\", ticks=(0:5:15, [L\"%$s\" for s in 0:5:15]), halign=:left)\n@views for (j, i) in enumerate(time_indices)\n    lines!(ax21, knots[i], means[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points * pde_sol.u[i][end], pde_sol.u[i][begin:(end-1)], color=colors[j], linestyle=:dash, linewidth=20)\nend\nlines!(ax11, leading_edges(esol).means, esol[1].t, color=:red, linewidth=16)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 0, 15.5)\narrows!(ax21, [13.0], [3.0], [13.0], [0.0], color=:black, linewidth=12, arrowsize=57)\ntext!(ax21, [22.0], [3.5], text=L\"t\", fontsize=81)","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"With all this, we finally obtain the figure.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"fig","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"<figure>\n    <img src='figure2.png', alt='Figure 2 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/figure_2/#Just-the-code","page":"Reproducing Figure 2","title":"Just the code","text":"","category":"section"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing StatsBase\n\n# Case study 1\nfig = Figure(fontsize=81, resolution=(3175, 2760))\nforce_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=50.0, s=0.2)\nfinal_time = 5.0\ndamping_constant = 1.0\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time,\n    damping_constant,\n    initial_condition)\nsol = solve(prob, Tsit5(), saveat=0.01)\npde = continuum_limit(prob, 2500, proliferation=false)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\nq = node_densities.(sol.u)\nq_stack = (vec ∘ stack)(q)\nr_stack = (vec ∘ stack)(sol.u)\nt_stack = repeat(sol.t, inner=length(initial_condition))\ntimes = [0, 1, 2, 3, 4, 5]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), sol.t) for τ in times]\nax11 = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(a):$ $ Case study 1\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5, [L\"%$s\" for s in 0:5]))\nax21 = Axis(fig[1, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(e):$ $ Case study 1\", titlealign=:left,\n    width=1200, height=400, halign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:2:6, [L\"%$s\" for s in 0:2:6]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=0:0.5:6, rasterize=true, extendhigh=:auto)\ntightlimits!(ax11)\nColorbar(fig[1, 0], hm11, width=50, flipaxis=false,  label=L\"q(x, t)\", ticks=(0:2:6, [L\"%$s\" for s in 0:2:6]), halign=:left)\nfor (j, i) in enumerate(time_indices)\n    lines!(ax21, sol.u[i], q[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=20)\nend\nxlims!(ax21, 0, 30)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 0, 6)\narrows!(ax21, [15.0, 23.0], [0.4, 3.0], [0.0, 4.0], [2.0, -2.0], color=:black, linewidth=8, arrowsize=57)\ntext!(ax21, [15.7, 28.0], [2.0, 0.7], text=[L\"t\", L\"t\"], color=:black, fontsize=81);\n\n# Case study 2\nforce_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=50.0, s=0.2)\nfinal_time = 100.0\ndamping_constant = 1.0\ninitial_condition = LinRange(0, 5, 60) |> collect\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time,\n    damping_constant,\n    initial_condition,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=0.1)\npde = continuum_limit(prob, 2500, proliferation=false)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\nq = node_densities.(sol.u)\nq_stack = (vec ∘ stack)(q)\nr_stack = (vec ∘ stack)(sol.u)\nt_stack = repeat(sol.t, inner=length(initial_condition))\ntimes = [0, 5, 10, 25, 50, 100]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), sol.t) for τ in times]\nax11 = Axis(fig[2, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(b):$ $ Case study 2\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:2:12, [L\"%$s\" for s in 0:2:12]),\n    yticks=(0:20:100, [L\"%$s\" for s in 0:20:100]))\nax21 = Axis(fig[2, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(f):$ $ Case study 2\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:2:12, [L\"%$s\" for s in 0:2:12]),\n    yticks=(5:4:13, [L\"%$s\" for s in 5:4:13]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=5:0.5:13, rasterize=true, extendhigh=:auto)\nColorbar(fig[2, 0], hm11,  width=50,flipaxis=false, label=L\"q(x, t)\", ticks=(5:2:13, [L\"%$s\" for s in 5:2:13]), halign=:left)\n@views for (j, i) in enumerate(time_indices)\n    lines!(ax21, sol.u[i], q[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points * pde_sol.u[i][end], pde_sol.u[i][begin:(end-1)], color=colors[j], linestyle=:dash, linewidth=20)\nend\nlines!(ax11, sol[end, :], sol.t, color=:red, linewidth=16)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 4.5, 13)\nxlims!(ax21, 0, 12)\nxlims!(ax11, 0, 12)\narrows!(ax21, [6.0], [12.0], [4.0], [-3.0], color=:black, linewidth=8, arrowsize=57)\ntext!(ax21, [8.0], [11.0], text=L\"t\", color=:black, fontsize=81);\n\n# Case study 3\nfinal_time = 50.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> max(zero(δ), p.β * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=1000, saveat=0.1)\npde = continuum_limit(prob, 2500, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol; stat=mean, extrapolate=true)\nq_stack = (vec ∘ stack)(means)\nr_stack = (vec ∘ stack)(knots)\nt_stack = repeat(esol[1].t, inner=length(knots[1]))\ntimes = [0.0, 1.0, 5.0, 10.0, 20.0, 50.0]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in times]\nax11 = Axis(fig[3, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(c):$ $ Case study 3\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:10:50, [L\"%$s\" for s in 0:10:50]))\nax21 = Axis(fig[3, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(g):$ $ Case study 3\", titlealign=:left,\n    width=1200, height=400, halign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=0:1:15, rasterize=true, extendhigh=:auto)\ntightlimits!(ax11)\nColorbar(fig[3, 0], hm11,  width=50,flipaxis=false, label=L\"q(x, t)\", ticks=(0:5:15, [L\"%$s\" for s in 0:5:15]), halign=:left)\nfor (j, i) in enumerate(time_indices)\n    lines!(ax21, knots[i], means[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points, pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=20)\nend\nxlims!(ax21, 0, 30)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 0, 15.5)\narrows!(ax21, [15.0], [3.0], [0.0], [7.5], color=:black, linewidth=12, arrowsize=57)\ntext!(ax21, [15.5], [7.0], text=L\"t\", color=:black, fontsize=81);\n\n# Case study 4\nfinal_time = 100.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30);] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 50.0\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> max(zero(δ), p.β * (one(δ) - inv(p.K * δ)))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp,\n    fix_right=false)\nens_prob = EnsembleProblem(prob)\nRandom.seed!(292919)\nesol = solve(ens_prob, Tsit5(), EnsembleSerial(); trajectories=100, saveat=0.1)\npde = continuum_limit(prob, 2500, proliferation=true)\npde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=esol[1].t)\n(; q, r, means, lowers, uppers, knots) = node_densities(esol, stat=mean, extrapolate=true)\nq_stack = (vec ∘ stack)(means)\nr_stack = (vec ∘ stack)(knots)\nt_stack = repeat(esol[1].t, inner=length(knots[1]))\ntimes = [0.0, 5.0, 10.0, 20.0, 50.0, 100.0]\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), esol[1].t) for τ in times]\nax11 = Axis(fig[4, 1], xlabel=L\"x\", ylabel=L\"t\",\n    title=L\"(d):$ $ Case study 4\", titlealign=:left,\n    width=1200, height=400,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:25:100, [L\"%$s\" for s in 0:25:100]))\nax21 = Axis(fig[4, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    title=L\"(h):$ $ Case study 4\", titlealign=:left,\n    width=1200, height=400, halign=:left,\n    xticks=(0:5:40, [L\"%$s\" for s in 0:5:40]),\n    yticks=(0:5:15, [L\"%$s\" for s in 0:5:15]))\nlinkxaxes!(ax11, ax21)\nhm11 = tricontourf!(ax11, r_stack, t_stack, q_stack, levels=0:1:15, rasterize=true, extendhigh=:auto)\nColorbar(fig[4, 0], hm11,  width=50,flipaxis=false, label=L\"q(x, t)\", ticks=(0:5:15, [L\"%$s\" for s in 0:5:15]), halign=:left)\n@views for (j, i) in enumerate(time_indices)\n    lines!(ax21, knots[i], means[i], color=colors[j], linewidth=9)\n    lines!(ax21, pde.geometry.mesh_points * pde_sol.u[i][end], pde_sol.u[i][begin:(end-1)], color=colors[j], linestyle=:dash, linewidth=20)\nend\nlines!(ax11, leading_edges(esol).means, esol[1].t, color=:red, linewidth=16)\ntightlimits!(ax11)\ntightlimits!(ax21)\nylims!(ax21, 0, 15.5)\narrows!(ax21, [13.0], [3.0], [13.0], [0.0], color=:black, linewidth=12, arrowsize=57)\ntext!(ax21, [22.0], [3.5], text=L\"t\", fontsize=81);\n\nfig","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"","category":"page"},{"location":"case_studies/figure_2/","page":"Reproducing Figure 2","title":"Reproducing Figure 2","text":"This page was generated using Literate.jl.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_supplementary_material/linear_diffusion.jl\"","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"tip: Tip\nThis example is also available as a Jupyter notebook: linear_diffusion.ipynb","category":"page"},{"location":"supplementary_material/linear_diffusion/#Linear-Diffusion","page":"Linear Diffusion","title":"Linear Diffusion","text":"","category":"section"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"In this section we show how we obtained the results in the supplementary material where we used the force law F(ell_i) = k(aell_i - s) so that we obtain linear diffusion D(q) = k. The parameter a is set to 1 and is only used so that aell_i has units of length. To start, let us load in the packages we will need.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing DataInterpolations\nusing Optimization\nusing OptimizationNLopt\nusing PreallocationTools\nusing SpecialFunctions\nusing Setfield","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"For the initial condition, we define it according to a Gaussian initial density. In particular, we let the initial density be given by","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"q_0(x) = fracAsqrt2mathrmpisigmaexpleft-frac12left(fracx-L_02sigmaright)^2right","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"where A = N(0)operatornameerfL_0sqrt24sigma, L_0=10, sigma^2 = 3, N(0) = 40, and operatornameerf is the error function. To obtain the initial condition from this, we solve","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"(x_2(0) ldots x_40(0)) = operatorname*argmin_substackx_2(0) ldots x_40(0) 0x_2(0)cdotsx_40(0)L_0sum_i=1^41left(q_0left(x_i(0)right) - q_iright)^2","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"where q_i is the density using StepwiseEQL.cell_density and noting that we also have x_1(0)=0 and x_41(0) = L_0. The code that follows obtains this initial condition, where we also impose symmetry of the densities about x=L_02.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"function initial_density(x, p)\n    (; σ, L₀, N₀) = p\n    return N₀ * exp(-(2x - L₀)^2 / (8σ^2)) / (erf(L₀ * sqrt(2) / (4σ)) * sqrt(2π * σ^2))\nend\nfunction impose_symmetry!(ξ, x)\n    _ξ = get_tmp(ξ, x)\n    for i in eachindex(x)\n        _ξ[i] = x[i]\n        if i ≠ firstindex(x)\n            _ξ[lastindex(x)+i-1] = L₀ - x[end-i+1]\n        end\n    end\n    return _ξ\nend\nfunction objective_function(x, p)\n    ℓ = zero(eltype(x))\n    ξ = impose_symmetry!(p.ξ, x)\n    for i in eachindex(ξ)\n        qᵢ = initial_density(ξ[i], p)\n        q̂ᵢ = StepwiseEQL.cell_density(ξ, i)\n        ℓ += (qᵢ - q̂ᵢ)^2\n    end\n    return ℓ\nend\nσ, L₀, N₀ = sqrt(3.0), 10.0, 40\np = (σ=σ, L₀=L₀, N₀=N₀, ξ=DiffCache(zeros(N₀ + 1)))\nlb = fill(0.0, 1 + N₀ ÷ 2)\nlb[end] = L₀ / 2\nub = fill(L₀ / 2, 1 + N₀ ÷ 2)\nub[begin] = 0.0\nx = collect(LinRange(0, L₀ / 2, 1 + N₀ ÷ 2))\noptf = OptimizationFunction(objective_function, Optimization.AutoForwardDiff())\noptp = OptimizationProblem(optf, x, p, lb=lb, ub=ub)\noptsol = solve(optp, NLopt.LD_LBFGS())\ninitial_condition = impose_symmetry!(zeros(N₀ + 1), optsol.u)","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"41-element Vector{Float64}:\n  0.0\n  1.5787033523246374\n  2.1340980079211676\n  2.4973813897938477\n  2.774109159733593\n  ⋮\n  7.502618610206152\n  7.8659019920788324\n  8.421296647675362\n 10.0","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"Now that we have our initial condition, let us define and solve the CellProblem.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"final_time = 100.0\nη = 1.0\ns = 1.0\nk = 20.0\nFp = (s=s, k=k)\nF = (δ, p) -> k * (inv(δ) - p.s)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant=η,\n    force_law=F,\n    force_law_parameters=Fp,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=0.01)","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"retcode: Success\nInterpolation: 1st order linear\nt: 10001-element Vector{Float64}:\n   0.0\n   0.01\n   0.02\n   0.03\n   0.04\n   ⋮\n  99.97\n  99.98\n  99.99\n 100.0\nu: 10001-element Vector{Vector{Float64}}:\n [0.0, 1.5787033523246374, 2.1340980079211676, 2.4973813897938477, 2.774109159733593, 3.003581585705231, 3.2020192021768916, 3.3793419906978626, 3.5408616392248677, 3.690628759412924  …  6.309371240587076, 6.459138360775132, 6.620658009302137, 6.797980797823108, 6.996418414294769, 7.225890840266407, 7.502618610206152, 7.8659019920788324, 8.421296647675362, 10.0]\n [0.0, 1.3651358188376719, 1.9490241066453966, 2.3335217503330896, 2.628603228897222, 2.872935877679148, 3.0845791597576984, 3.273459199755298, 3.4456439133940746, 3.605134305410975  …  6.394865542781103, 6.554355715417048, 6.726539859163963, 6.915418334715366, 7.127056987526195, 7.371374413948285, 7.666397356929318, 8.050605150886081, 8.632191479495392, 9.939560182054365]\n [0.0, 1.1840474987409613, 1.7795132613380433, 2.1816362842952723, 2.492391164439249, 2.7503408469420108, 2.97400280842732, 3.173693413464358, 3.3557684965354837, 3.5244401077672594  …  6.4755527410500155, 6.644218165908885, 6.826280909740453, 7.025945618444571, 7.249549390807395, 7.507355278814261, 7.817701624600291, 8.218377239770449, 8.806272295500522, 9.906800873191289]\n [0.0, 1.0300281346643718, 1.6257791425985335, 2.0408730534092263, 2.364912066826393, 2.6349890099702487, 2.8695932842690204, 3.079219614973615, 3.27040341683455, 3.4475100682711575  …  6.55249014346213, 6.729542271829751, 6.920656965227514, 7.130172496123379, 7.3645659670052686, 7.63418932816289, 7.957114662503464, 8.368907375209199, 8.951462837231963, 9.902936169260467]\n [0.0, 0.9001575656443275, 1.4870813302846435, 1.9106923881046163, 2.245616044270653, 2.52633628533944, 2.77089350730545, 2.989795073039422, 3.189684227446955, 3.375034311134568  …  6.624902810480961, 6.810147120871633, 7.009874432924693, 7.228510350061106, 7.472594830350273, 7.752391836833429, 8.085295599306898, 8.503778769509019, 9.074970235114737, 9.925967827782154]\n ⋮\n [0.0, 0.9776532909898301, 1.957061276052828, 2.9330646517968657, 3.9151759773409602, 4.889121915498164, 5.874881043384528, 6.847110965322164, 7.834635230790262, 8.807768983533764  …  30.475470644510676, 31.4678233869865, 32.460989535491585, 33.45498199948898, 34.44981072293689, 35.44548547030536, 36.44201413098871, 37.43940367980373, 38.43765958240537, 39.43678610086499]\n [0.0, 0.9780504282382008, 1.956176231012628, 2.934445785886711, 3.9129074980345258, 4.891970463090923, 5.870928766785619, 6.851348685066234, 7.830771400950265, 8.811414731230666  …  30.47563371973013, 31.467988403454353, 32.46115692769191, 33.455151103155735, 34.44998152378922, 35.44565756295844, 36.44218733498954, 37.43957767960069, 38.43783413541829, 39.43696092246783]\n [0.0, 0.9785110439305068, 1.9550944332251787, 2.9360266992646356, 3.9101234720238196, 4.89522664023304, 5.86613221114375, 6.856364311122323, 7.826232925470904, 8.815838929459241  …  30.475796795216, 31.468153337729248, 32.46132428606158, 33.45532014314944, 34.45015227775932, 35.44582959813444, 36.44236048705599, 37.43975162385969, 38.438008634499745, 39.437135689279]\n [0.0, 0.9782634989596738, 1.9556631522047718, 2.93514656520586, 3.911571879463237, 4.8933826951442665, 5.868702927075771, 6.853689184576215, 7.828853090332832, 8.813641611536875  …  30.475959332538498, 31.46831851389349, 32.46149141687953, 33.45548923450289, 34.450322917104785, 35.446001615383665, 36.4425335645067, 37.4399255251732, 38.43818307340694, 39.4373104032046]","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"Now we look at the data and compare it to the continuum limit.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"pde_continuum = continuum_limit(prob, 2500)\npde_sol = solve(pde_continuum, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\npde_ξ = pde_continuum.geometry.mesh_points\npde_L = pde_sol[end, :]\npde_q = pde_sol[begin:(end-1), :]\ncell_q = node_densities.(sol.u)\ncell_r = sol.u\ncell_L = sol[end, :]\nt = (0.0, 1 / 10, 2.0, 10.0, 50.0, 75.0, 100.0)\ncolors = (:black, :red, :blue, :green, :orange, :purple, :brown)\nt_idx = [findlast(≤(τ), sol.t) for τ in t]\nfig = Figure(fontsize=45)\nax1 = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\", width=950, height=300,\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    xticks=(0:10:40, [L\"%$s\" for s in 0:10:40]), yticks=(0:2:10, [L\"%$s\" for s in 0:2:10]))\nfor (j, i) in enumerate(t_idx)\n    lines!(ax1, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax1, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax1, [10.0], [7.0], [3.0], [-2.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax1, [12.2], [5.7], text=L\"t\", color=:black, fontsize=47)\nax2 = Axis(fig[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\", width=950, height=300,\n    title=L\"(b):$ $ Leading edge\", titlealign=:left,\n    xticks=(0:25:100, [L\"%$s\" for s in 0:25:100]), yticks=(0:10:40, [L\"%$s\" for s in 0:10:40]))\nlines!(ax2, sol.t, cell_L, color=:black, linewidth=8, label=L\"$ $Discrete\")\nlines!(ax2, pde_sol.t, pde_L, color=:red, linestyle=:dash, linewidth=8, label=L\"$ $Learned\")\naxislegend(position=:rb)\nresize_to_layout!(fig)\nfig","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"<figure>\n    <img src='sfigure_linear_diffusion.png', alt='Figure S5 from the paper'><br>\n</figure>","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"Let us now apply our equation learning procedure to this problem.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"diffusion_basis = PolynomialBasis(-2, 2)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-2, 2)\neql_sol = stepwise_selection(sol;\n    diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=100, initial=:none,\n    threshold_tol=(q=0.3, dL=0.2))","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"StepwiseEQL Solution.\n    D(q) = θ₃ᵈ ϕ₃ᵈ(q)\n    H(q) = θ₂ʰ ϕ₂ʰ(q) + θ₅ʰ ϕ₅ʰ(q)\n    E(q) = θ₃ᵉ ϕ₃ᵉ(q)\n┌──────┬───────────────────────────────┬───────────────────────────────┬───────────────────────────────┬────────┐\n│ Step │  θ₁ᵈ   θ₂ᵈ    θ₃ᵈ   θ₄ᵈ   θ₅ᵈ │  θ₁ʰ   θ₂ʰ   θ₃ʰ   θ₄ʰ    θ₅ʰ │  θ₁ᵉ   θ₂ᵉ    θ₃ᵉ   θ₄ᵉ   θ₅ᵉ │   Loss │\n├──────┼───────────────────────────────┼───────────────────────────────┼───────────────────────────────┼────────┤\n│    1 │ 0.00  0.00   0.00  0.00  0.00 │ 0.00  0.00  0.00  0.00   0.00 │ 0.00  0.00   0.00  0.00  0.00 │   0.76 │\n│    2 │ 0.00  0.00  19.18  0.00  0.00 │ 0.00  0.00  0.00  0.00   0.00 │ 0.00  0.00   0.00  0.00  0.00 │   1.14 │\n│    3 │ 0.00  0.00  19.18  0.00  0.00 │ 0.00  0.00  0.00  0.00  -0.02 │ 0.00  0.00   0.00  0.00  0.00 │   0.98 │\n│    4 │ 0.00  0.00  19.18  0.00  0.00 │ 0.00  0.00  0.00  0.00  -0.02 │ 0.00  0.00  20.05  0.00  0.00 │  -5.05 │\n│    5 │ 0.00  0.00  19.18  0.00  0.00 │ 0.00  0.42  0.00  0.00  -0.42 │ 0.00  0.00  20.05  0.00  0.00 │ -10.73 │\n└──────┴───────────────────────────────┴───────────────────────────────┴───────────────────────────────┴────────┘","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"Now we look at the results.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"function plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis, conserve_mass=false)\n    t = (0.0, 1 / 10, 2.0, 10.0, 50.0, 75.0, 100.0)\n    prob = sol.prob.p\n    prob = @set prob.final_time = 100.0\n    sol = solve(prob, Tsit5(), saveat=[collect(t); LinRange(0, 100, 2500)] |> sort |> unique)\n    time_indices = [findlast(≤(τ), sol.t) for τ in t]\n    colors = (:black, :red, :blue, :green, :orange, :purple, :brown)\n\n    pde = eql_sol.pde\n    pde = @set pde.final_time = 100.0 # need to resolve so that we plot over the complete time interval\n    pde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\n    pde_continuum = deepcopy(pde)\n    pde_continuum.diffusion_parameters.θ .= [0, 0.0, k / η, 0.0, 0]\n    pde_continuum.boundary_conditions.rhs.p.θ .= [0, 2.0, -2.0, 0, 0]\n    pde_continuum.boundary_conditions.moving_boundary.p.θ .= [0, 0, k / η, 0, 0]\n    pde_ξ = pde_continuum.geometry.mesh_points\n    pde_L = pde_sol[end, :]\n    pde_q = pde_sol[begin:(end-1), :]\n    cell_q = node_densities.(sol.u)\n    cell_r = sol.u\n    cell_L = sol[end, :]\n\n    q_range = LinRange(0.3, 9.3, 250)\n\n    fig = Figure(fontsize=45, resolution=(2220, 961))\n    top_grid = fig[1, 1] = GridLayout(1, 2)\n    bottom_grid = fig[2, 1] = GridLayout(1, 3)\n\n    ax_pde = Axis(top_grid[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\", width=950, height=300,\n        title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n        xticks=(0:10:40, [L\"%$s\" for s in 0:10:40]), yticks=(0:2:10, [L\"%$s\" for s in 0:2:10]))\n    for (j, i) in enumerate(time_indices)\n        lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n        lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\n    end\n    arrows!(ax_pde, [10.0], [7.0], [3.0], [-2.0], color=:black, linewidth=12, arrowsize=50)\n    text!(ax_pde, [12.2], [5.7], text=L\"t\", color=:black, fontsize=47)\n\n    ax_leading_edge = Axis(top_grid[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\", width=950, height=300,\n        title=L\"(b):$ $ Leading edge\", titlealign=:left,\n        xticks=(0:25:100, [L\"%$s\" for s in 0:25:100]), yticks=(0:10:40, [L\"%$s\" for s in 0:10:40]))\n    lines!(ax_leading_edge, pde_sol.t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\n    lines!(ax_leading_edge, sol.t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\n    axislegend(position=:rb)\n\n    ax_diffusion = Axis(bottom_grid[1, 1],\n        xlabel=L\"q\", ylabel=L\"D(q)\", width=600, height=300,\n        title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n        xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]), yticks=(0:5:25, [L\"%$s\" for s in 0:5:25]))\n    D_cont_fnc = q -> k / η\n    D_cont = D_cont_fnc.(q_range)\n    local D_sol\n    try\n        D_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n    catch e\n        print(e)\n        D_sol = D_cont\n    end\n    lines!(ax_diffusion, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_diffusion, q_range, D_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_diffusion, 0, 10)\n    ylims!(ax_diffusion, 15, 25)\n\n    ax_rhs = Axis(bottom_grid[1, 2],\n        xlabel=L\"q\", ylabel=L\"H(q)\", width=600, height=300,\n        title=L\"(d): $H(q)$ comparison\", titlealign=:left,\n        xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]), yticks=(-20:5:5, [L\"%$s\" for s in -20:5:5]))\n    RHS_cont_fnc = q -> 2q^2 * (1 - s * q)\n    RHS_cont = RHS_cont_fnc.(q_range)\n    local RHS_sol\n    try\n        RHS_sol = rhs_basis.(q_range, Ref(eql_sol.rhs_theta), Ref(nothing))\n    catch e\n        print(e)\n        RHS_sol = RHS_cont\n    end\n    lines!(ax_rhs, q_range, RHS_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_rhs, q_range, RHS_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_rhs, 0, 10)\n    ylims!(ax_rhs, -20, 5)\n\n    ax_moving_boundary = Axis(bottom_grid[1, 3],\n        xlabel=L\"q\", ylabel=L\"E(q)\", width=600, height=300,\n        title=L\"(e): $E(q)$ comparison\", titlealign=:left,\n        xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]), yticks=(0:5:25, [L\"%$s\" for s in 0:5:25]))\n    MB_cont_fnc = q -> k / η\n    MB_cont = MB_cont_fnc.(q_range)\n    local MB_sol\n    try\n        if !conserve_mass\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.moving_boundary_theta), Ref(nothing))\n        else\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n        end\n    catch e\n        print(e)\n        MB_sol = MB_cont\n    end\n    lines!(ax_moving_boundary, q_range, MB_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_moving_boundary, q_range, MB_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rb)\n    xlims!(ax_moving_boundary, 0, 10)\n    ylims!(ax_moving_boundary, 15, 25)\n    fig\nend\nfig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis)\nfig","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"<figure>\n    <img src='sfigure_linear_diffusion_2.png', alt='Figure S6 from the paper'><br>\n</figure>","category":"page"},{"location":"supplementary_material/linear_diffusion/#Just-the-code","page":"Linear Diffusion","title":"Just the code","text":"","category":"section"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\nusing Random\nusing DataInterpolations\nusing Optimization\nusing OptimizationNLopt\nusing PreallocationTools\nusing SpecialFunctions\nusing Setfield\n\nfunction initial_density(x, p)\n    (; σ, L₀, N₀) = p\n    return N₀ * exp(-(2x - L₀)^2 / (8σ^2)) / (erf(L₀ * sqrt(2) / (4σ)) * sqrt(2π * σ^2))\nend\nfunction impose_symmetry!(ξ, x)\n    _ξ = get_tmp(ξ, x)\n    for i in eachindex(x)\n        _ξ[i] = x[i]\n        if i ≠ firstindex(x)\n            _ξ[lastindex(x)+i-1] = L₀ - x[end-i+1]\n        end\n    end\n    return _ξ\nend\nfunction objective_function(x, p)\n    ℓ = zero(eltype(x))\n    ξ = impose_symmetry!(p.ξ, x)\n    for i in eachindex(ξ)\n        qᵢ = initial_density(ξ[i], p)\n        q̂ᵢ = StepwiseEQL.cell_density(ξ, i)\n        ℓ += (qᵢ - q̂ᵢ)^2\n    end\n    return ℓ\nend\nσ, L₀, N₀ = sqrt(3.0), 10.0, 40\np = (σ=σ, L₀=L₀, N₀=N₀, ξ=DiffCache(zeros(N₀ + 1)))\nlb = fill(0.0, 1 + N₀ ÷ 2)\nlb[end] = L₀ / 2\nub = fill(L₀ / 2, 1 + N₀ ÷ 2)\nub[begin] = 0.0\nx = collect(LinRange(0, L₀ / 2, 1 + N₀ ÷ 2))\noptf = OptimizationFunction(objective_function, Optimization.AutoForwardDiff())\noptp = OptimizationProblem(optf, x, p, lb=lb, ub=ub)\noptsol = solve(optp, NLopt.LD_LBFGS())\ninitial_condition = impose_symmetry!(zeros(N₀ + 1), optsol.u)\n\nfinal_time = 100.0\nη = 1.0\ns = 1.0\nk = 20.0\nFp = (s=s, k=k)\nF = (δ, p) -> k * (inv(δ) - p.s)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant=η,\n    force_law=F,\n    force_law_parameters=Fp,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=0.01)\n\npde_continuum = continuum_limit(prob, 2500)\npde_sol = solve(pde_continuum, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\npde_ξ = pde_continuum.geometry.mesh_points\npde_L = pde_sol[end, :]\npde_q = pde_sol[begin:(end-1), :]\ncell_q = node_densities.(sol.u)\ncell_r = sol.u\ncell_L = sol[end, :]\nt = (0.0, 1 / 10, 2.0, 10.0, 50.0, 75.0, 100.0)\ncolors = (:black, :red, :blue, :green, :orange, :purple, :brown)\nt_idx = [findlast(≤(τ), sol.t) for τ in t]\nfig = Figure(fontsize=45)\nax1 = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\", width=950, height=300,\n    title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n    xticks=(0:10:40, [L\"%$s\" for s in 0:10:40]), yticks=(0:2:10, [L\"%$s\" for s in 0:2:10]))\nfor (j, i) in enumerate(t_idx)\n    lines!(ax1, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n    lines!(ax1, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\nend\narrows!(ax1, [10.0], [7.0], [3.0], [-2.0], color=:black, linewidth=12, arrowsize=50)\ntext!(ax1, [12.2], [5.7], text=L\"t\", color=:black, fontsize=47)\nax2 = Axis(fig[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\", width=950, height=300,\n    title=L\"(b):$ $ Leading edge\", titlealign=:left,\n    xticks=(0:25:100, [L\"%$s\" for s in 0:25:100]), yticks=(0:10:40, [L\"%$s\" for s in 0:10:40]))\nlines!(ax2, sol.t, cell_L, color=:black, linewidth=8, label=L\"$ $Discrete\")\nlines!(ax2, pde_sol.t, pde_L, color=:red, linestyle=:dash, linewidth=8, label=L\"$ $Learned\")\naxislegend(position=:rb)\nresize_to_layout!(fig)\nfig\n\ndiffusion_basis = PolynomialBasis(-2, 2)\nrhs_basis = PolynomialBasis(1, 5)\nmoving_boundary_basis = PolynomialBasis(-2, 2)\neql_sol = stepwise_selection(sol;\n    diffusion_basis, rhs_basis, moving_boundary_basis,\n    mesh_points=100, initial=:none,\n    threshold_tol=(q=0.3, dL=0.2))\n\nfunction plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis, conserve_mass=false)\n    t = (0.0, 1 / 10, 2.0, 10.0, 50.0, 75.0, 100.0)\n    prob = sol.prob.p\n    prob = @set prob.final_time = 100.0\n    sol = solve(prob, Tsit5(), saveat=[collect(t); LinRange(0, 100, 2500)] |> sort |> unique)\n    time_indices = [findlast(≤(τ), sol.t) for τ in t]\n    colors = (:black, :red, :blue, :green, :orange, :purple, :brown)\n\n    pde = eql_sol.pde\n    pde = @set pde.final_time = 100.0 # need to resolve so that we plot over the complete time interval\n    pde_sol = solve(pde, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\n    pde_continuum = deepcopy(pde)\n    pde_continuum.diffusion_parameters.θ .= [0, 0.0, k / η, 0.0, 0]\n    pde_continuum.boundary_conditions.rhs.p.θ .= [0, 2.0, -2.0, 0, 0]\n    pde_continuum.boundary_conditions.moving_boundary.p.θ .= [0, 0, k / η, 0, 0]\n    pde_ξ = pde_continuum.geometry.mesh_points\n    pde_L = pde_sol[end, :]\n    pde_q = pde_sol[begin:(end-1), :]\n    cell_q = node_densities.(sol.u)\n    cell_r = sol.u\n    cell_L = sol[end, :]\n\n    q_range = LinRange(0.3, 9.3, 250)\n\n    fig = Figure(fontsize=45, resolution=(2220, 961))\n    top_grid = fig[1, 1] = GridLayout(1, 2)\n    bottom_grid = fig[2, 1] = GridLayout(1, 3)\n\n    ax_pde = Axis(top_grid[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\", width=950, height=300,\n        title=L\"(a):$ $ PDE comparison\", titlealign=:left,\n        xticks=(0:10:40, [L\"%$s\" for s in 0:10:40]), yticks=(0:2:10, [L\"%$s\" for s in 0:2:10]))\n    for (j, i) in enumerate(time_indices)\n        lines!(ax_pde, pde_ξ * pde_L[i], pde_q[:, i], color=colors[j], linestyle=:dash, linewidth=8)\n        lines!(ax_pde, cell_r[i], cell_q[i], color=colors[j], linewidth=4, label=L\"%$(t[j])\")\n    end\n    arrows!(ax_pde, [10.0], [7.0], [3.0], [-2.0], color=:black, linewidth=12, arrowsize=50)\n    text!(ax_pde, [12.2], [5.7], text=L\"t\", color=:black, fontsize=47)\n\n    ax_leading_edge = Axis(top_grid[1, 2], xlabel=L\"t\", ylabel=L\"L(t)\", width=950, height=300,\n        title=L\"(b):$ $ Leading edge\", titlealign=:left,\n        xticks=(0:25:100, [L\"%$s\" for s in 0:25:100]), yticks=(0:10:40, [L\"%$s\" for s in 0:10:40]))\n    lines!(ax_leading_edge, pde_sol.t, pde_L, color=:red, linestyle=:dash, linewidth=5, label=L\"$ $Learned\")\n    lines!(ax_leading_edge, sol.t, cell_L, color=:black, linewidth=3, label=L\"$ $Discrete\")\n    axislegend(position=:rb)\n\n    ax_diffusion = Axis(bottom_grid[1, 1],\n        xlabel=L\"q\", ylabel=L\"D(q)\", width=600, height=300,\n        title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n        xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]), yticks=(0:5:25, [L\"%$s\" for s in 0:5:25]))\n    D_cont_fnc = q -> k / η\n    D_cont = D_cont_fnc.(q_range)\n    local D_sol\n    try\n        D_sol = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n    catch e\n        print(e)\n        D_sol = D_cont\n    end\n    lines!(ax_diffusion, q_range, D_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_diffusion, q_range, D_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_diffusion, 0, 10)\n    ylims!(ax_diffusion, 15, 25)\n\n    ax_rhs = Axis(bottom_grid[1, 2],\n        xlabel=L\"q\", ylabel=L\"H(q)\", width=600, height=300,\n        title=L\"(d): $H(q)$ comparison\", titlealign=:left,\n        xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]), yticks=(-20:5:5, [L\"%$s\" for s in -20:5:5]))\n    RHS_cont_fnc = q -> 2q^2 * (1 - s * q)\n    RHS_cont = RHS_cont_fnc.(q_range)\n    local RHS_sol\n    try\n        RHS_sol = rhs_basis.(q_range, Ref(eql_sol.rhs_theta), Ref(nothing))\n    catch e\n        print(e)\n        RHS_sol = RHS_cont\n    end\n    lines!(ax_rhs, q_range, RHS_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_rhs, q_range, RHS_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rt)\n    xlims!(ax_rhs, 0, 10)\n    ylims!(ax_rhs, -20, 5)\n\n    ax_moving_boundary = Axis(bottom_grid[1, 3],\n        xlabel=L\"q\", ylabel=L\"E(q)\", width=600, height=300,\n        title=L\"(e): $E(q)$ comparison\", titlealign=:left,\n        xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]), yticks=(0:5:25, [L\"%$s\" for s in 0:5:25]))\n    MB_cont_fnc = q -> k / η\n    MB_cont = MB_cont_fnc.(q_range)\n    local MB_sol\n    try\n        if !conserve_mass\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.moving_boundary_theta), Ref(nothing))\n        else\n            MB_sol = moving_boundary_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\n        end\n    catch e\n        print(e)\n        MB_sol = MB_cont\n    end\n    lines!(ax_moving_boundary, q_range, MB_sol, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Learned\")\n    lines!(ax_moving_boundary, q_range, MB_cont, linewidth=6, color=:black, linestyle=:dashdot, label=L\"$ $Continuum limit\")\n    axislegend(position=:rb)\n    xlims!(ax_moving_boundary, 0, 10)\n    ylims!(ax_moving_boundary, 15, 25)\n    fig\nend\nfig = plot_results(eql_sol, sol, k, s, η, diffusion_basis, rhs_basis, moving_boundary_basis)\nfig","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"","category":"page"},{"location":"supplementary_material/linear_diffusion/","page":"Linear Diffusion","title":"Linear Diffusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_case_studies/cs1.jl\"","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cs1.ipynb","category":"page"},{"location":"case_studies/cs1/#Case-Studies:-Case-Study-1","page":"Case Study 1","title":"Case Studies: Case Study 1","text":"","category":"section"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"This example shows how we obtained the results in the paper for the first case study. To start, let us load in the packages we will need.","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq","category":"page"},{"location":"case_studies/cs1/#Simulating","page":"Case Study 1","title":"Simulating","text":"","category":"section"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"The first step in our procedure is to obtain the results from the cell simulation. This is done as follows. We use the force law F(ell) = k(s - ell).","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"force_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=50.0, s=0.2)\nfinal_time = 5.0\ndamping_constant = 1.0\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time,\n    damping_constant,\n    initial_condition)\nsol = solve(prob, Tsit5(), saveat=LinRange(0, final_time, 50))","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"retcode: Success\nInterpolation: 1st order linear\nt: 50-element Vector{Float64}:\n 0.0\n 0.1020408163265306\n 0.2040816326530612\n 0.30612244897959184\n 0.4081632653061224\n ⋮\n 4.6938775510204085\n 4.795918367346939\n 4.8979591836734695\n 5.0\nu: 50-element Vector{Vector{Float64}}:\n [0.0, 0.1724137931034483, 0.3448275862068966, 0.5172413793103449, 0.6896551724137931, 0.8620689655172414, 1.0344827586206897, 1.206896551724138, 1.3793103448275863, 1.5517241379310345  …  28.448275862068964, 28.620689655172413, 28.79310344827586, 28.965517241379313, 29.137931034482758, 29.310344827586206, 29.482758620689655, 29.655172413793103, 29.827586206896555, 30.0]\n [0.0, 0.17241379310349564, 0.3448275862072093, 0.5172413793123272, 0.6896551724254885, 0.862068965583525, 1.0344827589757786, 1.2068965535463891, 1.379310353708087, 1.5517241793563723  …  28.448275820643673, 28.620689646291883, 28.793103446453646, 28.96551724102418, 29.137931034416518, 29.31034482757447, 29.4827586206877, 29.655172413792776, 29.827586206896513, 30.0]\n [0.0, 0.1724138117467249, 0.3448276572464026, 0.5172415843189141, 0.6896558354604316, 0.8620707934381211, 1.0344882309935757, 1.2069109680032413, 1.379350391424813, 1.5518243068723196  …  28.44817569312707, 28.62064960857575, 28.793089031996246, 28.965511769006884, 29.137929206561484, 29.31034416453989, 29.48275841568083, 29.655172342753765, 29.827586188253186, 30.0]\n [0.0, 0.1724180723087107, 0.3448393892353834, 0.5172691410859218, 0.6897179116629475, 0.8622065671105769, 1.0347778052706758, 1.2075127763561453, 1.3805674430039012, 1.554222253567815  …  28.445777746432174, 28.619432556996106, 28.792487223643853, 28.965222194729332, 29.137793432889413, 29.310282088337058, 29.482730858914078, 29.65516061076462, 29.827581927691288, 30.0]\n [0.0, 0.17250037129897575, 0.34502183801768355, 0.5176649951705653, 0.6904162692664148, 0.8635599798065833, 1.0370852193558056, 1.2116982876663236, 1.3874720675876706, 1.5660206102285164  …  28.4339793897718, 28.612527932412014, 28.788301712333965, 28.96291478064394, 29.13644002019364, 29.309583730733404, 29.482335004829572, 29.65497816198222, 29.827499628701077, 30.0]\n ⋮\n [0.0, 0.4614393800663206, 0.9236739347032462, 1.386439368972283, 1.851563420601704, 2.3177075992535756, 2.7876942156439184, 3.2591089912813254, 3.735720931301201, 4.214052274597669  …  25.78594772540233, 26.264279068698805, 26.740891008718663, 27.212305784356094, 27.682292400746412, 28.148436579398304, 28.613560631027713, 29.07632606529675, 29.538560619933687, 30.0]\n [0.0, 0.46426752760006446, 0.9285313930002487, 1.3948029724410733, 1.86104668264444, 2.331249447002487, 2.8013504305271613, 3.2772511919669443, 3.7528965222099173, 4.236021671466421  …  25.763978328533593, 26.247103477790063, 26.72274880803307, 27.19864956947283, 27.66875055299752, 28.13895331735556, 28.60519702755893, 29.07146860699975, 29.535732472399932, 30.0]\n [0.0, 0.4667997920222022, 0.933391698910398, 1.4022871779794028, 1.8705453674745856, 2.3433528371963184, 2.815053577475178, 3.2934356472551616, 3.7701776720962408, 4.255567677743931  …  25.744432322256078, 26.229822327903747, 26.70656435274485, 27.184946422524817, 27.656647162803683, 28.129454632525412, 28.5977128220206, 29.066608301089605, 29.5332002079778, 30.0]\n [0.0, 0.46888429127863634, 0.938590802821992, 1.4084378023194548, 1.8807270563962621, 2.3532656659043787, 2.8297942955536013, 3.306619606648261, 3.7888653821560094, 4.271367024660429  …  25.728632975339583, 26.211134617843985, 26.69338039335174, 27.170205704446403, 27.64673433409563, 28.119272943603733, 28.591562197680545, 29.061409197178005, 29.53111570872137, 30.0]","category":"page"},{"location":"case_studies/cs1/#Equation-learning","page":"Case Study 1","title":"Equation learning","text":"","category":"section"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"To now define the equation learning problem, we note that all we need to learn is D(q). The basis expansion we use is","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"D(q) = dfractheta_1^dq + dfractheta_2^dq^2 + dfractheta_3^dq^3","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"which we can define as follows:","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"diffusion_basis = BasisSet(\n    (q, k) -> inv(q),\n    (q, k) -> inv(q^2),\n    (q, k) -> inv(q^3),\n)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"(::BasisSet{Tuple{Main.var\"##19533\".var\"#3#6\", Main.var\"##19533\".var\"#4#7\", Main.var\"##19533\".var\"#5#8\"}}) (generic function with 3 methods)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"This could have also been defined using","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"diffusion_basis = PolynomialBasis(-1, -3)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"(::BasisSet{Tuple{StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}}}) (generic function with 3 methods)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"which is simpler. Next, let us obtain the results. The call to stepwise_selection is simple in this case. To start, we use no pruning:","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"eql_sol = stepwise_selection(sol; diffusion_basis)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n┌──────┬──────────────────────┬───────┐\n│ Step │   θ₁ᵈ    θ₂ᵈ     θ₃ᵈ │  Loss │\n├──────┼──────────────────────┼───────┤\n│    1 │ -5.97  70.73  -27.06 │   Inf │\n│    2 │ -1.46  47.11    0.00 │ -4.33 │\n│    3 │  0.00  43.52    0.00 │ -5.18 │\n└──────┴──────────────────────┴───────┘","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"The coefficient for theta_2^d is not perfect. If we instead use some pruning on q, we can obtain an improved result:","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"eql_sol2 = stepwise_selection(sol; diffusion_basis, threshold_tol=(q=0.1,))","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n┌──────┬─────────────────────┬───────┐\n│ Step │   θ₁ᵈ    θ₂ᵈ    θ₃ᵈ │  Loss │\n├──────┼─────────────────────┼───────┤\n│    1 │ -1.45  42.48  13.76 │ -4.19 │\n│    2 │  0.00  37.79  19.69 │ -5.46 │\n│    3 │  0.00  49.83   0.00 │ -7.97 │\n└──────┴─────────────────────┴───────┘","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"(Note that the comma after 0.1 is necessary so that we get a NamedTuple, otherwise it doesn't parse as a Tuple. Compare:","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"threshold_tol = (q = 0.1) # same as threshold_tol = q = 0.1","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"0.1","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"threshold_tol = (q=0.1,)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"(q = 0.1,)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"This is only for NamedTuples with a single element, e.g. (a = 0.1, b = 0.2) is fine.) We note also that if you want the LaTeX form of these tables, for eql_sol you could use for example:","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"latex_table(eql_sol)","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"StepwiseEQL Solution.\n    D(q) = θ₂ᵈ ϕ₂ᵈ(q)\n\\begin{tabular}{|r|rrr|r|}\n  \\hline\n  \\textbf{Step} & \\textbf{$\\theta_{1}^d$ } & \\textbf{$\\theta_{2}^d$ } & \\textbf{$\\theta_{3}^d$ } & \\textbf{Loss} \\\\\\hline\n  1 & -5.97 & 70.73 & \\color{blue}{\\textbf{-27.06}} & $\\infty$ \\\\\n  2 & \\color{blue}{\\textbf{-1.46}} & 47.11 & 0.00 & -4.33 \\\\\n  3 & 0.00 & 43.52 & 0.00 & -5.18 \\\\\\hline\n\\end{tabular}","category":"page"},{"location":"case_studies/cs1/#Plotting","page":"Case Study 1","title":"Plotting","text":"","category":"section"},{"location":"case_studies/cs1/#Progression-of-the-Diffusion-Curves","page":"Case Study 1","title":"Progression of the Diffusion Curves","text":"","category":"section"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"Let us now examine our results. First, we see how the diffusion curve is changed at each step of our procedure, comparing the results with pruning and without pruning.","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"fig = Figure(fontsize=38)\nax1 = Axis(fig[1, 1], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=600, height=300,\n    title=L\"(a): $D(q)$ without pruning\", titlealign=:left,\n    xticks=(0:2:6, [L\"%$s\" for s in 0:2:6]),\n    yticks=(-20:20:80, [L\"%$s\" for s in -20:20:80]))\nax2 = Axis(fig[1, 2], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=600, height=300,\n    title=L\"(b): $D(q)$ with pruning\", titlealign=:left,\n    xticks=(0:2:6, [L\"%$s\" for s in 0:2:6]),\n    yticks=(-20:20:80, [L\"%$s\" for s in -20:20:80]))\nq_range = LinRange(1 / 10, 6, 250)\nDθ_no_prune = eql_sol.diffusion_theta_history\nDθ_prune = eql_sol2.diffusion_theta_history\ncolors = (:red, :black, :lightgreen)\nlinestyles = (:solid, :solid, :dash)\nfor j in 1:3\n    lines!(ax1, q_range, diffusion_basis.(q_range, Ref(Dθ_no_prune[:, j]), Ref(nothing)), linewidth=6, linestyle=linestyles[j], color=colors[j], label=L\"Step $%$(j)$\")\n    lines!(ax2, q_range, diffusion_basis.(q_range, Ref(Dθ_prune[:, j]), Ref(nothing)), linewidth=6, linestyle=linestyles[j], color=colors[j], label=L\"Step $%$(j)$\")\nend\nfor ax in (ax1, ax2)\n    ylims!(ax, -20, 80)\n    hlines!(ax, [0.0], color=:grey, linewidth=6, linestyle=:dash)\nend\nfig[1, 3] = Legend(fig, ax1)\nresize_to_layout!(fig)\nfig","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"<figure>\n    <img src='figure4.png', alt='Figure 4 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs1/#Comparing-Density-Results","page":"Case Study 1","title":"Comparing Density Results","text":"","category":"section"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"Let us now compare the density results.","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"fig = Figure(fontsize=45, resolution=(1470, 961))\nax = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=600, height=300,\n    title=L\"(a):$ $ No pruning\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:2:6, [L\"%$s\" for s in 0:2:6]))\nax2 = Axis(fig[1, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=600, height=300,\n    title=L\"(b):$ $ Pruning\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:2:6, [L\"%$s\" for s in 0:2:6]))\nt = (0, 1, 2, 3, 4, 5)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), sol.t) for τ in t]\nfor (j, i) in enumerate(time_indices)\n    lines!(ax, eql_sol.pde.geometry.mesh_points, eql_sol.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=5)\n    lines!(ax, sol.u[i], node_densities(sol.u[i]), color=colors[j], linewidth=3)\n    lines!(ax2, eql_sol2.pde.geometry.mesh_points, eql_sol2.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=5)\n    lines!(ax2, sol.u[i], node_densities(sol.u[i]), color=colors[j], linewidth=3, label=L\"%$(t[j])\")\nend\nfor ax in (ax, ax2)\n    arrows!(ax, [15.0, 23.0], [0.4, 3.0], [0.0, 4.0], [2.0, -2.0], color=:black, linewidth=8, arrowsize=40)\n    text!(ax, [15.7, 28.0], [2.0, 0.7], text=[L\"t\", L\"t\"], color=:black, fontsize=47)\n    xlims!(ax, 0, 30)\nend\nax3 = Axis(fig[2, 1:2], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=1200, height=300,\n    title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n    xticks=(0:2:6, [L\"%$s\" for s in 0:2:6]),\n    yticks=(0:20:80, [L\"%$s\" for s in 0:20:80]))\nD_no_prune = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nD_prune = diffusion_basis.(q_range, Ref(eql_sol2.diffusion_theta), Ref(nothing))\nD_cont_fnc = q -> (force_law_parameters.k / damping_constant) / q^2\nD_cont = D_cont_fnc.(q_range)\nlines!(ax3, q_range, D_no_prune, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Non-pruned\")\nlines!(ax3, q_range, D_prune, linewidth=6, color=:black, linestyle=:solid, label=L\"$ $Pruned\")\nlines!(ax3, q_range, D_cont, linewidth=6, color=:lightgreen, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nylims!(ax3, 0, 80)\nfig","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"<figure>\n    <img src='../case_studies/figure5.png', alt='Figure 5 from the paper'><br>\n</figure>","category":"page"},{"location":"case_studies/cs1/#Just-the-code","page":"Case Study 1","title":"Just the code","text":"","category":"section"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\n\nforce_law = (δ, p) -> p.k * (p.s - δ)\nforce_law_parameters = (k=50.0, s=0.2)\nfinal_time = 5.0\ndamping_constant = 1.0\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time,\n    damping_constant,\n    initial_condition)\nsol = solve(prob, Tsit5(), saveat=LinRange(0, final_time, 50))\n\ndiffusion_basis = BasisSet(\n    (q, k) -> inv(q),\n    (q, k) -> inv(q^2),\n    (q, k) -> inv(q^3),\n)\n\ndiffusion_basis = PolynomialBasis(-1, -3)\n\neql_sol = stepwise_selection(sol; diffusion_basis)\n\neql_sol2 = stepwise_selection(sol; diffusion_basis, threshold_tol=(q=0.1,))\n\nthreshold_tol = (q = 0.1) # same as threshold_tol = q = 0.1\n\nthreshold_tol = (q=0.1,)\n\nlatex_table(eql_sol)\n\nfig = Figure(fontsize=38)\nax1 = Axis(fig[1, 1], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=600, height=300,\n    title=L\"(a): $D(q)$ without pruning\", titlealign=:left,\n    xticks=(0:2:6, [L\"%$s\" for s in 0:2:6]),\n    yticks=(-20:20:80, [L\"%$s\" for s in -20:20:80]))\nax2 = Axis(fig[1, 2], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=600, height=300,\n    title=L\"(b): $D(q)$ with pruning\", titlealign=:left,\n    xticks=(0:2:6, [L\"%$s\" for s in 0:2:6]),\n    yticks=(-20:20:80, [L\"%$s\" for s in -20:20:80]))\nq_range = LinRange(1 / 10, 6, 250)\nDθ_no_prune = eql_sol.diffusion_theta_history\nDθ_prune = eql_sol2.diffusion_theta_history\ncolors = (:red, :black, :lightgreen)\nlinestyles = (:solid, :solid, :dash)\nfor j in 1:3\n    lines!(ax1, q_range, diffusion_basis.(q_range, Ref(Dθ_no_prune[:, j]), Ref(nothing)), linewidth=6, linestyle=linestyles[j], color=colors[j], label=L\"Step $%$(j)$\")\n    lines!(ax2, q_range, diffusion_basis.(q_range, Ref(Dθ_prune[:, j]), Ref(nothing)), linewidth=6, linestyle=linestyles[j], color=colors[j], label=L\"Step $%$(j)$\")\nend\nfor ax in (ax1, ax2)\n    ylims!(ax, -20, 80)\n    hlines!(ax, [0.0], color=:grey, linewidth=6, linestyle=:dash)\nend\nfig[1, 3] = Legend(fig, ax1)\nresize_to_layout!(fig)\nfig\n\nfig = Figure(fontsize=45, resolution=(1470, 961))\nax = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=600, height=300,\n    title=L\"(a):$ $ No pruning\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:2:6, [L\"%$s\" for s in 0:2:6]))\nax2 = Axis(fig[1, 2], xlabel=L\"x\", ylabel=L\"q(x, t)\",\n    width=600, height=300,\n    title=L\"(b):$ $ Pruning\", titlealign=:left,\n    xticks=(0:10:30, [L\"%$s\" for s in 0:10:30]),\n    yticks=(0:2:6, [L\"%$s\" for s in 0:2:6]))\nt = (0, 1, 2, 3, 4, 5)\ncolors = (:black, :red, :blue, :green, :orange, :purple)\ntime_indices = [findlast(≤(τ), sol.t) for τ in t]\nfor (j, i) in enumerate(time_indices)\n    lines!(ax, eql_sol.pde.geometry.mesh_points, eql_sol.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=5)\n    lines!(ax, sol.u[i], node_densities(sol.u[i]), color=colors[j], linewidth=3)\n    lines!(ax2, eql_sol2.pde.geometry.mesh_points, eql_sol2.pde_sol.u[i], color=colors[j], linestyle=:dash, linewidth=5)\n    lines!(ax2, sol.u[i], node_densities(sol.u[i]), color=colors[j], linewidth=3, label=L\"%$(t[j])\")\nend\nfor ax in (ax, ax2)\n    arrows!(ax, [15.0, 23.0], [0.4, 3.0], [0.0, 4.0], [2.0, -2.0], color=:black, linewidth=8, arrowsize=40)\n    text!(ax, [15.7, 28.0], [2.0, 0.7], text=[L\"t\", L\"t\"], color=:black, fontsize=47)\n    xlims!(ax, 0, 30)\nend\nax3 = Axis(fig[2, 1:2], xlabel=L\"q\", ylabel=L\"D(q)\",\n    width=1200, height=300,\n    title=L\"(c): $D(q)$ comparison\", titlealign=:left,\n    xticks=(0:2:6, [L\"%$s\" for s in 0:2:6]),\n    yticks=(0:20:80, [L\"%$s\" for s in 0:20:80]))\nD_no_prune = diffusion_basis.(q_range, Ref(eql_sol.diffusion_theta), Ref(nothing))\nD_prune = diffusion_basis.(q_range, Ref(eql_sol2.diffusion_theta), Ref(nothing))\nD_cont_fnc = q -> (force_law_parameters.k / damping_constant) / q^2\nD_cont = D_cont_fnc.(q_range)\nlines!(ax3, q_range, D_no_prune, linewidth=6, color=:red, linestyle=:solid, label=L\"$ $Non-pruned\")\nlines!(ax3, q_range, D_prune, linewidth=6, color=:black, linestyle=:solid, label=L\"$ $Pruned\")\nlines!(ax3, q_range, D_cont, linewidth=6, color=:lightgreen, linestyle=:dash, label=L\"$ $Continuum limit\")\naxislegend(position=:rt)\nylims!(ax3, 0, 80)\nfig","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"","category":"page"},{"location":"case_studies/cs1/","page":"Case Study 1","title":"Case Study 1","text":"This page was generated using Literate.jl.","category":"page"},{"location":"repository_structure/#Repository-Structure","page":"Repository Structure","title":"Repository Structure","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"Pages = [\"repository_structure.md\"]","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"In this section, we describe the structure of the repository. Note that the description of the functions used for running the algorithm itself are defined in the next section.","category":"page"},{"location":"repository_structure/#Root","page":"Repository Structure","title":"Root","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The root of the repository contains five files.","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":".gitignore: This file tells git which files to ignore when committing changes.\nLICENSE: This file contains the license for the repository. The license for this package is an MIT license. \nREADME.md: This file contains the basic description of the repository, primarily for linking to the documentation.\nProject.toml: This file contains the dependencies for the package.\nManifest.toml: This file contains the exact versions of the dependencies for the package. This together with Project.toml makes the paper results exactly reproducible.","category":"page"},{"location":"repository_structure/#.github/workflows","page":"Repository Structure","title":".github/workflows","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"This folder just contains some basic workflows for testing the package and producing its documentation. These are standard files you'll see in almost any Julia package.","category":"page"},{"location":"repository_structure/#docs","page":"Repository Structure","title":"docs","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The docs folder is what produces the documentation, and produces the paper results. Within this folder, what actually produces the documentation is the make.jl file, which uses Documenter.jl and Literate.jl to run the scripts and launch the documentation. The src folders contains all the scripts for each section, which you can inspect yourself - just read the documentation and, if you do want to see the source file, either see the link at the top-right or at the bottom of the page.","category":"page"},{"location":"repository_structure/#src","page":"Repository Structure","title":"src","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The src folder is where all the code for the algorithm lives. The folder is broken into other folders, and the only file inside this folder directly is:","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"StepwiseEQL.jl: This is the module that defines the package and loads in all the dependencies and the files.","category":"page"},{"location":"repository_structure/#src/structs","page":"Repository Structure","title":"src/structs","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The src/structs folder contains the definitions for all the structs used in the package:","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"eql_model.jl: The definition of an EQLModel, used for producing the stepwise learning results. This struct would have a very similar definition if you were to extend to other types of problems.\neql_solution.jl: The definition of an EQLSolution, giving the results for the stepwise learning procedure.\nensemble_eql_solution.jl: If running the stepwise learning procedure for multiple initial sets of active coefficients, you obtain an EnsembleEQLSolution defined here.\naveraged_ode_solution.jl: For proliferation we average the solution over each simulation, leading to a single set of results. This average is defined as an AveragedODESolution, defined here.","category":"page"},{"location":"repository_structure/#src/function_evaluation","page":"Repository Structure","title":"src/function_evaluation","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The src/function_evaluation folder contains the files used for defining how we evaluate basis functions, and for how we compute densities and their derivatives:","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"basis_functions.jl: Defines the structs for a basis function, specifically as a BasisSet or a PolynomialBasis.\ndensity_computations.jl: This contains all the functions that are used to compute densities, their derivatives, and similarly for leading edges.","category":"page"},{"location":"repository_structure/#src/problem_building","page":"Repository Structure","title":"src/problem_building","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The src/problem_building folder contains the main functions used for building up the EQLModels:","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"matrix_construction.jl: The main component of the algorithm is the construction of the matrix system boldsymbol Aboldsymboltheta = boldsymbol b. The code in this file constructs the matrix boldsymbol A and the vector boldsymbol b.\npde_construction.jl: This script automatically detects the type of PDE to be built (fixed boundary, moving boundary, proliferation, etc.) and constructs it.","category":"page"},{"location":"repository_structure/#src/individual_steps","page":"Repository Structure","title":"src/individual_steps","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The src/individual_steps folder is used for performing the individual steps in our procedure:","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"cross_validation.jl: This script contains the code used for creating the training and test sets if cross-validation is used for the algorithm.\ndensity_loss.jl: This script contains the functions used for evaluating the density component, and the leading edge component, of the loss function.\nevaluate_loss.jl: This script contains the functions used for evaluating the loss function completely.\nmodel_voting.jl: This script contains the functions used for incorporating and removing each term one at a time during an individual step of the algorithm, and for then making a vote on which model to step to in the next iteration.\npenalty.jl: This file contains the functions used for penalising model complexity, and also for enforcing constraints on D(q) and E(q).\nregression_loss.jl: This file contains the functions used for evaluating the regression component of the loss function.","category":"page"},{"location":"repository_structure/#src/algorithm","page":"Repository Structure","title":"src/algorithm","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"The src/algorithm folder is used for actually running the algorithm, with the main script being stepwise.jl:","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"stepwise.jl: This script contains the main entry point for running our stepwise procedure, defining the stepwise_selection function (described in more detail in the next section). \nrun_stepwise.jl: The stepwise_selection function from the previous point constructs an EQLModel and then runs the main internal method of stepwise_selection that actually runs all the results. This is defined in this file.\nmodel_sampling.jl: This file contains the internal function that is used for running the procedure for multiple initial conditions efficiently.","category":"page"},{"location":"repository_structure/#test","page":"Repository Structure","title":"test","text":"","category":"section"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"This folder is just for testing the algorithm's implementation itself. It is a bit lengthy and unlikely to be very readable, so you should not be overly concerned about it. If you did want to test the function, you can run ","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"julia> ] test","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"assuming the StepwiseEQL package is activated; you can tell if it is by seeing if, after typing ] test inside the Julia REPL without executing it, you see","category":"page"},{"location":"repository_structure/","page":"Repository Structure","title":"Repository Structure","text":"(StepwiseEQL) pkg> test","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_supplementary_material/new_density.jl\"","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"tip: Tip\nThis example is also available as a Jupyter notebook: new_density.ipynb","category":"page"},{"location":"supplementary_material/new_density/#Discrete-Densities-at-the-Boundaries","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"","category":"section"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"In this section, we show how we obtained the figures in the paper that motivate the need for our new definition of density at the boundary. We recall that we defined","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"beginalign*\nq_1(t) = frac2x_2(t) - x_1(t) - frac2x_3(t) - x_1(t) \nq_n(t) = frac2x_n(t) - x_n-1(t) - frac2x_n(t) - x_n-2(t)\nendalign*","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"modifying the previous definitions q_1(t) = 1x_2(t) and q_n(t) = 1(x_n(t) - x_n-1(t)).","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"To start, let us load in the packages we will need.","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"We now define and solve the CellProblem, and its corresponding continuum limit.","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"force_law = (δ, p) -> p.k * (p.s - δ)\nk, s, η, T = 50.0, 0.2, 1.0, 10.0\nforce_law_parameters = (k=k, s=s)\ninitial_condition = collect(LinRange(0, 5, 30))\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time=T,\n    damping_constant=η,\n    initial_condition,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=0.02)\npde_prob = continuum_limit(prob, 5000, proliferation=false)\npde_sol = solve(pde_prob, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"retcode: Success\nInterpolation: 1st order linear\nt: 501-element Vector{Float64}:\n  0.0\n  0.02\n  0.04\n  0.06\n  0.08\n  ⋮\n  9.94\n  9.96\n  9.98\n 10.0\nu: 501-element Vector{Vector{Float64}}:\n [5.8, 5.8, 5.8, 5.8, 5.8, 5.8, 5.799999999999999, 5.800000000000001, 5.8, 5.800000000000001  …  5.799999999999996, 5.799999999999996, 5.799999999999996, 5.799999999999996, 5.799999999999996, 5.799999999999996, 5.799999999999996, 5.799999999999996, 5.799999999999996, 5.0]\n [5.799999999999999, 5.799999999999999, 5.800000000000001, 5.800000000000001, 5.799999999999999, 5.8, 5.8, 5.800000000000001, 5.799999999999999, 5.799999999999999  …  5.1924095336557405, 5.190495704337308, 5.188581949234203, 5.186668313326301, 5.184756020440565, 5.182847493803263, 5.1809447979123915, 5.17904652757611, 5.177146783848216, 5.020959142248633]\n [5.799999999999999, 5.8, 5.799999999999999, 5.799999999999999, 5.8, 5.8, 5.8, 5.800000000000001, 5.8, 5.799999999999999  …  5.143442394138647, 5.142046298632507, 5.140650182859538, 5.139254077827552, 5.137858288677557, 5.136463403388777, 5.1350699293367486, 5.133677552337702, 5.132284878470131, 5.032916286859433]\n [5.799999999999995, 5.799999999999995, 5.799999999999995, 5.7999999999999945, 5.799999999999995, 5.799999999999995, 5.799999999999995, 5.799999999999995, 5.799999999999995, 5.7999999999999945  …  5.118227792139378, 5.117079988404248, 5.115932332278834, 5.114784836161163, 5.113637590358396, 5.112490765195386, 5.111344507534536, 5.110198730756248, 5.109053042509071, 5.042421082805959]\n [5.79999999999663, 5.799999999996631, 5.799999999996631, 5.79999999999663, 5.79999999999663, 5.799999999996629, 5.799999999996628, 5.799999999996627, 5.799999999996626, 5.7999999999966265  …  5.103163998482414, 5.102163055749991, 5.1011623632269725, 5.10016193038084, 5.099161837944899, 5.098162240724732, 5.097163272645574, 5.0961648508727775, 5.095166605712397, 5.050446188390052]\n ⋮\n [5.2225071190676555, 5.222507107636834, 5.22250707334437, 5.22250701619027, 5.222506936174542, 5.222506833297196, 5.222506707558247, 5.222506558957714, 5.222506387495615, 5.222506193171979  …  5.006205275518905, 5.00614107114595, 5.006076868698485, 5.006012668182211, 5.0059484696028385, 5.005884272966066, 5.005820078277598, 5.005755885543136, 5.005691694768377, 5.639095864107762]\n [5.22184873206438, 5.221848720669727, 5.2218486864857665, 5.221848629512506, 5.221848549749951, 5.221848447198115, 5.221848321857011, 5.221848173726659, 5.221848002807076, 5.221847809098291  …  5.006188207936062, 5.006124180483525, 5.006060154940927, 5.0059961313139505, 5.005932109608278, 5.005868089829588, 5.005804071983562, 5.005740056075877, 5.00567604211221, 5.639550474565784]\n [5.221192591559284, 5.221192580200655, 5.22119254612477, 5.221192489331633, 5.2211924098212545, 5.221192307593643, 5.2211921826488155, 5.221192034986788, 5.22119186460758, 5.221191671511219  …  5.0061711520945495, 5.006107300909339, 5.006043451618299, 5.005979604227087, 5.005915758741366, 5.005851915166788, 5.005788073509013, 5.005724233773695, 5.005660395966485, 5.64000372631041]\n [5.2205386932976285, 5.220538681974883, 5.220538648006646, 5.220538591392923, 5.220538512133723, 5.220538410229056, 5.220538285678937, 5.220538138483384, 5.220537968642416, 5.22053777615606  …  5.006154106765068, 5.006090431192137, 5.0060267574973825, 5.005963085686441, 5.005899415764949, 5.005835747738538, 5.00577208161284, 5.005708417393488, 5.005644755086109, 5.640455621425953]","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"Next, we need to get the data for the densities at t=2, as well as the derivatives. The densities are obtained below.","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"t_idx = findlast(≤(2), sol.t)\nnew_densities = node_densities(sol.u[t_idx])\nbaker_densities = copy(new_densities)\nbaker_densities[begin] = 1 / (sol.u[t_idx][2] - sol.u[t_idx][1])\nbaker_densities[end] = 1 / (sol.u[t_idx][end] - sol.u[t_idx][end-1])","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"5.041919353189308","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"To now set up the derivatives, we need the (x t) data.","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"pde_L = pde_sol.u[t_idx][end]\npde_q = pde_sol.u[t_idx][begin:(end-1)]\npde_x = pde_prob.geometry.mesh_points * pde_L","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"5000-element Vector{Float64}:\n 0.0\n 0.0010598254070783829\n 0.0021196508141567657\n 0.0031794762212351488\n 0.004239301628313531\n ⋮\n 5.294887733763601\n 5.2959475591706795\n 5.297007384577758\n 5.298067209984836","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"Next, we compute all the data.","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"new_dx = zeros(length(sol))\nbaker_dx = zeros(length(sol))\ncontinuum_dx = zeros(length(sol))\nfor j in eachindex(sol)\n    new_dx[j] = StepwiseEQL.cell_∂q∂x(sol, length(sol.u[j]), j)\n    qₙ₋₂ = StepwiseEQL.cell_density(sol, length(sol.u[j]) - 2, j)\n    qₙ₋₁ = StepwiseEQL.cell_density(sol, length(sol.u[j]) - 1, j)\n    qₙ = 1 / (sol.u[j][end] - sol.u[j][end-1])\n    xₙ₋₂ = sol.u[j][end-2]\n    xₙ₋₁ = sol.u[j][end-1]\n    xₙ = sol.u[j][end]\n    baker_dx[j] = StepwiseEQL.backward_dfdx(qₙ₋₂, qₙ₋₁, qₙ, xₙ₋₂, xₙ₋₁, xₙ)\n    baker_dx[j] = (qₙ - qₙ₋₁) / (xₙ - xₙ₋₁)\n    u = pde_sol.u[j][end-1]\n    continuum_dx[j] = 2u^2 * (1 - u * s)\nend","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"Finally, we can plot the comparisons.","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"fig = Figure(fontsize=43, resolution=(1580, 950))\nax = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\",\n    width=600, height=300,\n    xticks=(0:6, [L\"%$s\" for s in 0:6]),\n    yticks=(5:0.2:5.8, [L\"%$s\" for s in 5:0.2:5.8]),\n    title=L\"(a):$ $ Complete view\",\n    titlealign=:left)\nlines!(ax, sol.u[t_idx], new_densities, linewidth=3, color=:red, label=L\"$ $New\")\nlines!(ax, sol.u[t_idx], baker_densities, linewidth=3, color=:blue, label=L\"$ $Baker\")\nlines!(ax, pde_x, pde_q, linewidth=3, color=:black, label=L\"$ $Continuum limit\")\nax = Axis(fig[1, 2], xlabel=L\"x\", ylabel=L\"q(x,t)\",\n    width=600, height=300,\n    title=L\"(b):$ $ Zoomed in view\",\n    xticks=(5:0.1:5.3, [L\"%$s\" for s in 5:0.1:5.3]),\n    yticks=(5:0.05:5.1, [L\"%$s\" for s in 5:0.05:5.1]),\n    titlealign=:left)\nlines!(ax, sol.u[t_idx], new_densities, linewidth=3, color=:red, label=L\"$ $New\")\nlines!(ax, sol.u[t_idx], baker_densities, linewidth=3, color=:blue, label=L\"$ $Baker\")\nlines!(ax, pde_x, pde_q, linewidth=3, color=:black, label=L\"$ $Continuum limit\")\nxlims!(ax, 5, 5.3)\nylims!(ax, 5, 5.1)\nax = Axis(fig[2, 1:2],\n    xlabel=L\"t\", ylabel=L\"\\partial q/\\partial x\",\n    title=L\"(c):$ $ Derivative comparisons\",\n    titlealign=:left,\n    xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]),\n    yticks=(-1.5:0.5:0, [L\"%$s\" for s in -1.5:0.5:0]),\n    width=1350,\n    height=300)\nlines!(ax, sol.t[2:end], new_dx[2:end], linewidth=3, color=:red, label=L\"$ $New\")\nlines!(ax, sol.t[2:end], baker_dx[2:end], linewidth=3, color=:blue, label=L\"$ $Baker\")\nlines!(ax, sol.t[2:end], continuum_dx[2:end], linewidth=3, color=:black, label=L\"$ $Continuum limit\")\nxlims!(ax, 0, 10)\nylims!(ax, -1.5, 0.2)\naxislegend(ax, position=:rb)\nfig","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"<figure>\n    <img src='sfigure_boundary_density.png', alt='Figure S1 from the paper'><br>\n</figure>","category":"page"},{"location":"supplementary_material/new_density/#Just-the-code","page":"Discrete Densities at the Boundaries","title":"Just the code","text":"","category":"section"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing LinearSolve\n\nforce_law = (δ, p) -> p.k * (p.s - δ)\nk, s, η, T = 50.0, 0.2, 1.0, 10.0\nforce_law_parameters = (k=k, s=s)\ninitial_condition = collect(LinRange(0, 5, 30))\nprob = CellProblem(;\n    force_law,\n    force_law_parameters,\n    final_time=T,\n    damping_constant=η,\n    initial_condition,\n    fix_right=false)\nsol = solve(prob, Tsit5(), saveat=0.02)\npde_prob = continuum_limit(prob, 5000, proliferation=false)\npde_sol = solve(pde_prob, TRBDF2(linsolve=KLUFactorization()), saveat=sol.t)\n\nt_idx = findlast(≤(2), sol.t)\nnew_densities = node_densities(sol.u[t_idx])\nbaker_densities = copy(new_densities)\nbaker_densities[begin] = 1 / (sol.u[t_idx][2] - sol.u[t_idx][1])\nbaker_densities[end] = 1 / (sol.u[t_idx][end] - sol.u[t_idx][end-1])\n\npde_L = pde_sol.u[t_idx][end]\npde_q = pde_sol.u[t_idx][begin:(end-1)]\npde_x = pde_prob.geometry.mesh_points * pde_L\n\nnew_dx = zeros(length(sol))\nbaker_dx = zeros(length(sol))\ncontinuum_dx = zeros(length(sol))\nfor j in eachindex(sol)\n    new_dx[j] = StepwiseEQL.cell_∂q∂x(sol, length(sol.u[j]), j)\n    qₙ₋₂ = StepwiseEQL.cell_density(sol, length(sol.u[j]) - 2, j)\n    qₙ₋₁ = StepwiseEQL.cell_density(sol, length(sol.u[j]) - 1, j)\n    qₙ = 1 / (sol.u[j][end] - sol.u[j][end-1])\n    xₙ₋₂ = sol.u[j][end-2]\n    xₙ₋₁ = sol.u[j][end-1]\n    xₙ = sol.u[j][end]\n    baker_dx[j] = StepwiseEQL.backward_dfdx(qₙ₋₂, qₙ₋₁, qₙ, xₙ₋₂, xₙ₋₁, xₙ)\n    baker_dx[j] = (qₙ - qₙ₋₁) / (xₙ - xₙ₋₁)\n    u = pde_sol.u[j][end-1]\n    continuum_dx[j] = 2u^2 * (1 - u * s)\nend\n\nfig = Figure(fontsize=43, resolution=(1580, 950))\nax = Axis(fig[1, 1], xlabel=L\"x\", ylabel=L\"q(x,t)\",\n    width=600, height=300,\n    xticks=(0:6, [L\"%$s\" for s in 0:6]),\n    yticks=(5:0.2:5.8, [L\"%$s\" for s in 5:0.2:5.8]),\n    title=L\"(a):$ $ Complete view\",\n    titlealign=:left)\nlines!(ax, sol.u[t_idx], new_densities, linewidth=3, color=:red, label=L\"$ $New\")\nlines!(ax, sol.u[t_idx], baker_densities, linewidth=3, color=:blue, label=L\"$ $Baker\")\nlines!(ax, pde_x, pde_q, linewidth=3, color=:black, label=L\"$ $Continuum limit\")\nax = Axis(fig[1, 2], xlabel=L\"x\", ylabel=L\"q(x,t)\",\n    width=600, height=300,\n    title=L\"(b):$ $ Zoomed in view\",\n    xticks=(5:0.1:5.3, [L\"%$s\" for s in 5:0.1:5.3]),\n    yticks=(5:0.05:5.1, [L\"%$s\" for s in 5:0.05:5.1]),\n    titlealign=:left)\nlines!(ax, sol.u[t_idx], new_densities, linewidth=3, color=:red, label=L\"$ $New\")\nlines!(ax, sol.u[t_idx], baker_densities, linewidth=3, color=:blue, label=L\"$ $Baker\")\nlines!(ax, pde_x, pde_q, linewidth=3, color=:black, label=L\"$ $Continuum limit\")\nxlims!(ax, 5, 5.3)\nylims!(ax, 5, 5.1)\nax = Axis(fig[2, 1:2],\n    xlabel=L\"t\", ylabel=L\"\\partial q/\\partial x\",\n    title=L\"(c):$ $ Derivative comparisons\",\n    titlealign=:left,\n    xticks=(0:2:10, [L\"%$s\" for s in 0:2:10]),\n    yticks=(-1.5:0.5:0, [L\"%$s\" for s in -1.5:0.5:0]),\n    width=1350,\n    height=300)\nlines!(ax, sol.t[2:end], new_dx[2:end], linewidth=3, color=:red, label=L\"$ $New\")\nlines!(ax, sol.t[2:end], baker_dx[2:end], linewidth=3, color=:blue, label=L\"$ $Baker\")\nlines!(ax, sol.t[2:end], continuum_dx[2:end], linewidth=3, color=:black, label=L\"$ $Continuum limit\")\nxlims!(ax, 0, 10)\nylims!(ax, -1.5, 0.2)\naxislegend(ax, position=:rb)\nfig","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"","category":"page"},{"location":"supplementary_material/new_density/","page":"Discrete Densities at the Boundaries","title":"Discrete Densities at the Boundaries","text":"This page was generated using Literate.jl.","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"CurrentModule = StepwiseEQL","category":"page"},{"location":"algorithm/#The-Algorithm","page":"The Algorithm","title":"The Algorithm","text":"","category":"section"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"Pages = [\"algorithm.md\"]","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"In this section, we describe the functions used for actually running the algorithm. Here we only describe how to run the results after obtaining a CellProblem. If you want to know more about setting up the CellProblems, or solving any PDEs, please see:","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"EpithelialDynamics1D.jl: This is the package that actually implements the discrete model of the epithelial dynamics. Please see its documentation for detailed information and examples.\nFiniteVolumeMethod1D.jl: This is the package that solves the PDEs on a fixed boundary. Please see its documentation for detailed information and examples.\nMovingBoundaryProblems1D.jl: This is the package that solves the PDEs on a moving boundary. Please see its documentation for detailed information and examples.","category":"page"},{"location":"algorithm/#Basis-Functions","page":"The Algorithm","title":"Basis Functions","text":"","category":"section"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"The functions below are used for defining basis functions:","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"BasisSet \nPolynomialBasis","category":"page"},{"location":"algorithm/#StepwiseEQL.BasisSet","page":"The Algorithm","title":"StepwiseEQL.BasisSet","text":"BasisSet{F<:Tuple} <: Function\n\nA set of basis functions. \n\nFields\n\nbases::F: A Tuple of basis functions, each function being of the form (q, p) -> Number, with the same p for each basis function.\n\nConstructors\n\nBasisSet((f1, f2, ...))\nBasisSet(f1, f2, ...)\n\nEvaluating\n\nYou can evaluate a BasisSet using the method\n\n(f::BasisSet{F})(q, θ, p) where {F}\n\nwhich returns \n\nsum_i=1^n theta_if_i(q p)\n\n\n\n\n\n","category":"type"},{"location":"algorithm/#StepwiseEQL.PolynomialBasis","page":"The Algorithm","title":"StepwiseEQL.PolynomialBasis","text":"PolynomialBasis(d1, d2)\n\nConstruct a set of polynomial basis functions of degree d1 to d2,  returning a BasisSet object.\n\nExamples\n\njulia> basis = PolynomialBasis(2, 4);\n\njulia> basis(0.5, [0.1, 0.67, -2.3], nothing)\n-0.034999999999999976\n\njulia> 0.1 * 0.5^2 + 0.67 * 0.5^3 - 2.3 * 0.5^4\n-0.034999999999999976\n\n\n\n\n\n","category":"function"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"For example, the basis set q q^2 q^3 can be defined in two ways:","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"using StepwiseEQL\nf1 = (q, p) -> q \nf2 = (q, p) -> q^2 \nf3 = (q, p) -> q^3 \nB = BasisSet(f1, f2, f3)","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"(::BasisSet{Tuple{var\"#307#308\", var\"#309#310\", var\"#311#312\"}}) (generic function with 3 methods)","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"B = PolynomialBasis(1, 3)","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"(::BasisSet{Tuple{StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}, StepwiseEQL.var\"#52#54\"{Int64}}}) (generic function with 3 methods)","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"The reason for the second argument p is in case you want to give better control of the scaling on the basis function's coefficients. For example, the basis set aq bq^-2 cq^3 can be defined as:","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"f1 = (q, p) -> p.a * q \nf2 = (q, p) -> p.b * q^(-2)\nf3 = (q, p) -> p.c * q^3\nB = BasisSet(f1, f2, f3)","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"(::BasisSet{Tuple{var\"#313#314\", var\"#315#316\", var\"#317#318\"}}) (generic function with 3 methods)","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"and you would then provide p when evaluating B, for example:","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"p = (a = 2.0, b = 3.0, c = 5.0) # same p for each basis function\nB(0.2, [0.3, 0.5, 1], p)","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"37.66","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"which returns theta_1aq + theta_2bq^-2 + theta_3cq^3 with theta_1 = 03, theta_2 = 05, theta_3 = 1, a = 2, b = 3, c = 5, and q = 02.","category":"page"},{"location":"algorithm/#Averaging-ODE-Solutions","page":"The Algorithm","title":"Averaging ODE Solutions","text":"","category":"section"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"Usually averaging over multiple realisations from the discrete model can be handled internally by the stepwise function, but you may want to re-average for the purpose of plotting (as we do in case studies 3 and 4). For this reason, we provide AveragedODESolution as an exported function that you can use:","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"AveragedODESolution","category":"page"},{"location":"algorithm/#StepwiseEQL.AveragedODESolution","page":"The Algorithm","title":"StepwiseEQL.AveragedODESolution","text":"AveragedODESolution{K,S}\n\nStruct representing a cell simulation averaged over many simulations. \n\nFields\n\nu::K\n\nThese are the knots, storing the knots using for interpolating the solutions  at each time, where u[j] the knots for the jth time. \n\nt::Vector{Float64}\n\nThe vector of times.\n\nq::Vector{Vector{Float64}}\n\nThe averaged densities, with q[j] the averaged density at time t[j] and  at the corresponding knots in u[j].\n\ncell_sol::S\n\nThe original cell simulation.\n\nConstructor\n\nYou can construct an AveragedODESolution using the following method:\n\nAveragedODESolution(\n    sol::EnsembleSolution, \n    num_knots=100, \n    indices=eachindex(sol), \n    interp_fnc=LinearInterpolation, \n    stat=mean, \n    extrapolate=true\n)\n\nNote that the arguments are positional arguments, not keyword arguments.\n\nArguments\n\nsol\n\nThe ensemble of cell solutions.\n\nnum_knots\n\nThe number of knots to use in the interpolant for averaging the cell solutions.  Defaults to 100.\n\nindices\n\nThe indices of the simulations to consider for averaging. Defaults to all simulations.\n\ninterp_fnc\n\nA function of the form (u, t) that is used for averaging.  Defaults to linear interpolation from DataInterpolations.jl.\n\nstat\n\nThis should be a function, or a Tuple of two functions with one for each endpoint, that decides the range to use  for the knots at each time step. Defaults to mean,  meaning the knots for a given time will span between a and b, where a is the average left-most cell position over each  simulation at that time, and b is the average right-most cell position over each simulation at that time. If, for example, stat were (minimum, maximum), then the minimum and maximum end-positions would be used for a and b, respectively,  at the corresponding time.\n\nextrapolate=true\n\nWhether to allow for extrapolation when averaging the cell solutions. Defaults to true. If false, then when evaluating the interpolant for a given realisation and a given time, then the density for a node  is set to zero if it exceeds the right-most knot position for the given time.\n\nOutput\n\nReturns the corresponding AveragedODESolution.\n\n\n\n\n\n","category":"type"},{"location":"algorithm/#The-Stepwise-Algorithm","page":"The Algorithm","title":"The Stepwise Algorithm","text":"","category":"section"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"The entry point into our stepwise procedure is stepwise_selection, documented in detail below.","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"stepwise_selection","category":"page"},{"location":"algorithm/#StepwiseEQL.stepwise_selection","page":"The Algorithm","title":"StepwiseEQL.stepwise_selection","text":"stepwise_selection(cell_sol; kwargs...)\n\nPerform stepwise selection on the given cell solution cell_sol, given as a  CellSolution from EpithelialDynamics1D.jl. In the  list of keyword arguments below, the notation (A/B/C/D)_Y, for example,  means that there are keyword arguments A_Y, B_Y, C_Y, and D_Y.\n\nThe result returned from this function will be one of:\n\nEQLSolution\n\nThis gives the solution. You can display this in the REPL to see the table of  results automatically. You can inspect the individual coefficients and other  relevant objects by inspecting the fields of the struct. For example, if  you have \n\nsol = stepwise_selection(cell_sol; kwargs...)\n\nthen sol.diffusion_theta will be the set of coefficients for the diffusion  function. You can query the full list of fields by using \n\npropertynames(sol)\n\nor typing sol.<TAB> in the REPL (<TAB> means hit tab). We also note that if you  want to have more interactivity with the table that gets displayed in the REPL, you should  look into the show method for EQLSolution, which has signature \n\nBase.show(io::IO, ::MIME\"text/plain\", eql_sol::EQLSolution;\n    step_limit=6,\n    crop=:horizontal,\n    backend=Val(:text),\n    booktabs=true,\n    show_votes=false,\n    show_all_loss=false,\n    crayon=Crayon(bold=true, foreground=:green),\n    latex_crayon=[\"color{blue}\", \"textbf\"],\n    transpose=true)\n\nFor example,\n\nBase.show(stdout, MIME\"text/plain\"(), sol; show_votes=false, show_all_loss=false, transpose=true)\n\nprints the table without including the votes, only shows the complete loss function rather than also  including its individual components, and transposes the table. A LaTeX version of the table can be obtained  using backend=Val(:latex), e.g. a LaTeX version of the above could be printed using\n\nBase.show(stdout, MIME\"text/plain\"(), sol; backend=Val(:latex), show_votes=false, show_all_loss=false, transpose=true)\n\nYou can also just use \n\nlatex_table(sol; kwargs...)\n\nto get the LaTeX format printed.\n\nEnsembleEQLSolution\n\nIn this case, you have provided model_samples as a keyword argument and  model_samples > 1. This struct has four fields: solutions, which stores  all the individual EQLSolutions; final_loss, which stores a Dict mapping  final vectors of active coefficients to Tuples of the form (loss, n), where  loss is the loss function at that final model, and n is the number of times that  model was found out of the complete set of initial indicator vectors sampled;  best_model, which is an indicator vector which gives the model out of those found with the least loss; best_model_indices, which gives the indices of all solutions in solutions which had a  final indicator vector matching that of best_model.\n\nKeyword Arguments\n\n(diffusion/reaction/rhs/moving_boundary)_basis::BasisSet\n\nThe basis expansion to use for the diffusion, reaction, right-hand side, and moving boundary terms, respectively. If not provided, the functions are replaced  with the zero function. For diffusion_basis, a BasisSet is required.\n\n(diffusion/reaction/rhs/moving_boundary)_parameters\n\nThe parameters to use for evaluating the corresponding basis set. The default  is nothing.\n\n(diffusion/reaction/rhs/moving_boundary)_theta\n\nThis keyword argument indicates whether the coefficients θ used for evaluating the basis sets  are fixed or are to be learned, with a defualt of nothing. If nothing, then they will be learned. Otherwise, they should be  a vector of numbers indicating the coefficients θ to be used for the respective mechanism. For example, diffusion_theta = [1.0, 0.5] means that the diffusion function is evaluated with coefficients  θ₁ᵈ = 1 and θ₂ᵈ = 0.5.\n\nthreshold_tol\n\nThe threshold tolerances to use for pruning the matrix, with a default of a zero tolerance for each  quantity. This should be a NamedTuple if provided, only including any of the names q, x,  dt, dx, dx2, dx_bc, and dL. The q, dt, dx, and dx2 tolerances are used for pruning  the interior PDE, corresponding to tolerances based on the quantiles of q(x, t), ∂q(x, t)/∂t, ∂q(x, t)/∂x, and ∂²q(x, t)/∂x². The dx_bc tolerance is used for pruning based on ∂q(x, t)/∂t evaluated  at the boundary, and is only used for the matrix corresponding to the right-hand side boundary condition. The  dL tolerance is for dL/dt, and is only used for the matrix corresponding to the moving boundary condition.  For example, providing \n\nthreshold_tol = (q = 0.1, dL = 0.3, x = 0.7, dx = 0.1, dx_bc = 0.05)\n\nmeans that the matrix for the interior problem will only include points whose densities are between the  10% and 90% density quantiles, the 10% and 90% quantiles for ∂q(x, t)/∂x, at positions between 0 and 70% of the current leading edge for the given time. The matrix for the right-hand side boundary condition  will only include points between the 5% and 95% quantiles for ∂q(x, t)/∂x at the boundary. The matrix  for the moving boundary condition will only include points where the velocity dL/dt is between the 30%  and 70% quantiles of dL/dt.\n\nmesh_points\n\nThe number of mesh points to use for discretising the corresponding PDE. The default is 100.\n\ncross_validation\n\nWhether to use cross-validation for selecting the model. The default is false.\n\nrng\n\nThe random number generator to use. This defaults to the global RNG, Random.default_rng().\n\nskip\n\nIndices of any coefficients that should be skipped over when deciding which terms  to include or remove. By default, this is empty\n\nregression\n\nWhether to include the regression loss in the loss function. Defaults to false.\n\ndensity\n\nWhether to include the density loss in the loss function. Defaults to true.\n\ncomplexity\n\nThe complexity penalty to use for the loss function. Defaults to 1. Use 0 if you would  not like to penalise complexity.\n\nloss_function\n\nThe loss function use. Defaults to default_loss(; regression, density, complexity). The loss  function should take the same form as described in ?default_loss.\n\nbidirectional\n\nWhether to allow for steps in both directions, meaning terms can be either added or deleted at each step.  The default is true. If false, then steps can only be taken backwards.\n\ntrials\n\nIf cross_validation is true, this is the number of votes to attempt at each step of the algorithm. \n\ninitial\n\nThe initial set of active coefficients. The default is :all, meaning all terms are initially  active. If :random, then a random set of terms is initially active. If :none, then all terms are initially inactive. Otherwise, initial should be a vector of Booleans indicating the  initially active terms, with true for active and false for inactive. The indices should match  the flattened form of the coefficients, with the order of coefficients being diffusion, reaction,  rhs, and then moving_boundary. For example, if the basis functions are\n\nD(q) = θ₁ᵈϕ₁ᵈ + θ₂ᵈϕ₂ᵈ                      (diffusion)\nR(q) = θ₁ʳϕ₁ʳ + θ₂ʳϕ₂ʳ + θ₃ʳϕ₃ʳ             (reaction)\nH(q) = θ₁ʰϕ₁ʰ + θ₂ʰϕ₂ʰ + θ₃ʰϕ₃ʰ + θ₄ʰϕ₄ʰ    (rhs)\nE(q) = θ₁ᵉϕ₁ᵉ + θ₂ᵉϕ₂ᵉ                      (moving boundary)\n\nand you want to start with θ₁ᵈ, θ₁ʳ, θ₂ʳ, θ₂ʰ, and θ₂ᵉ active,  then you should provide \n\ninitial = [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1]\n\nmodel_samples\n\nHow many initial models to randomly sample when providing the results. This defaults to 1. If model_samples > 1, then initial must be :random. The result returned in this case  will be an EnsembleEQLSolution.\n\nuse_relative_err\n\nWhether to use relative error (true) or absolute error (false) in the loss function summands. Defaults  to true.\n\naggregate\n\nWhen considering an ensemble of cell solutions, aggregate=true indicates that the matrix constructed  should combine all the cell solutions into one matrix, and the loss function should be the sum of the loss functions for each cell solution. The default is false. If this is false, then for an ensemble of cell  solutions you must have average=Val(true); if both are false and the cell solution is an ensemble, the call will error. \n\ntime_range\n\nThe time range, provided as a Tuple of the form (tmin, tmax), to use for constructing the matrix.  The default is the complete time span that the cell simulation is performed over. \n\naverage\n\nWhen considering an ensemble of cell solutions, average=Val(true) indicates that the matrix constructed  should average the solutions together into a single matrix, and the loss function should use this averaged solution,  given by an AveragedODESolution. The default is Val(true). If this is Val(false), then for an ensemble of cell  solutions you must have aggregate=true; if both are false and the cell solution is an ensemble, the call will error. \n\nsimulation_indices\n\nThe simulations to consider in the matrix. Only relevant if an ensemble of cell solutions is being considered. Defaults to all simulations.\n\nnum_knots\n\nThe number of knots to use in the interpolant for averaging the cell solutions. Only relevant if an ensemble of cell solutions is being considered. Defaults to 100.\n\navg_interp_fnc\n\nA function of the form (u, t) that is used for averaging. Only relevant if an ensemble of cell solutions is being considered. Defaults to linear interpolation from DataInterpolations.jl.\n\nstat\n\nThis should be a function, or a Tuple of two functions with one for each endpoint, that decides the range to use  for the knots at each time step. Only relevant if an ensemble of cell solutions is being considered. Defaults to mean,  meaning the knots for a given time will span between a and b, where a is the average left-most cell position over each  simulation at that time, and b is the average right-most cell position over each simulation at that time. If, for example, stat were (minimum, maximum), then the minimum and maximum end-positions would be used for a and b, respectively,  at the corresponding time.\n\nshow_progress\n\nWhether to print the current step of the algorithm at each step. Defaults to true.\n\nmax_steps\n\nMaximum number of steps to allow for the algorithm. Defaults to 100.\n\nleading_edge_error\n\nWhether to include the leading edge error in the loss function. If this is true, then density must also be true. Only relevant if the cell simulation being considered is a moving boundary  problem. Defaults to true.\n\nextrapolate_pde\n\nIf the time range is smaller than the time span of the cell simulation, then setting extrapolate_pde to true means that the loss function will still consider all saved time points, not just those within the provided  time_range. The default is false.\n\nnum_constraint_checks\n\nThe number of equally-spaced nodes to use between the minimum and maximum densities for constraining the diffusion term and the moving boundary term. Defaults to 100.\n\nconserve_mass\n\nWhether to enforce conservation of mass by constraining the diffusion and moving boundary terms to be equal. Defaults to false.\n\nextrapolate_average\n\nWhether to allow for extrapolation when averaging the cell solutions. Only relevant if an ensemble of cell solutions is being considered. Defaults to true. If false, then when evaluating the interpolant for a given realisation and a given time, then the density for a node  is set to zero if it exceeds the right-most knot position for the given time.\n\ncouple_rhs\n\nWhether to couple the boundary conditions at the right-hand side and at the moving boundary together. Only relevant if the moving boundary coefficients  are fixed. If true, then the matrix for the right-hand boundary condition will also include terms coming from the moving boundary,  replacing ∂q/∂x with the right-hand side's assumed basis expansion. Defaults to true. If false, then the matrix for the right-hand boundary condition will only include terms coming from the right-hand side.\n\n\n\n\n\n","category":"function"},{"location":"algorithm/#Printing-LaTeX-Tables","page":"The Algorithm","title":"Printing LaTeX Tables","text":"","category":"section"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"From an EQLSolution, returned by stepwise_selection, you can print the LaTeX form of the table using latex_table:","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"latex_table","category":"page"},{"location":"algorithm/#StepwiseEQL.latex_table","page":"The Algorithm","title":"StepwiseEQL.latex_table","text":"latex_table(eql_sol::EQLSolution; kwargs...)\n\nPrints the EQLSolution eql_sol in LaTeX format. Keyword arguments are passed to show, which  has signature \n\nBase.show(io::IO, ::MIME\"text/plain\", eql_sol::EQLSolution;\n    step_limit=6,\n    crop=:horizontal,\n    backend=Val(:text),\n    booktabs=true,\n    show_votes=false,\n    show_all_loss=false,\n    crayon=Crayon(bold=true, foreground=:green),\n    latex_crayon=[\"color{blue}\", \"textbf\"],\n    transpose=true)\n\n(Of course, backend=Val(:latex) is passed - you cannot change that.)\n\n\n\n\n\n","category":"function"},{"location":"algorithm/#Loss-Function","page":"The Algorithm","title":"Loss Function","text":"","category":"section"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"If you want to provide a new loss function, you can provide it as a keyword loss_function to stepwise_selection. The function that is used to construct the default loss is below for example.","category":"page"},{"location":"algorithm/","page":"The Algorithm","title":"The Algorithm","text":"default_loss","category":"page"},{"location":"algorithm/#StepwiseEQL.default_loss","page":"The Algorithm","title":"StepwiseEQL.default_loss","text":"default_loss(; kwargs...)\ndefault_loss(regression_loss, density_loss, indicators; density=true, regression=false, complexity=1)\n\nThe default loss function. The first method, accepting the same keyword arguments as in the second method, returns  a function that accepts the regression loss, density loss, and indicators, and returns the total loss, evaluated  via the second method.\n\nArguments\n\nregression_loss: The value of the regression loss.\ndensity_loss: The value of the density loss.\nindicators: A vector of Boolean values, indicating which the set of active coefficients.\n\nKeyword Arguments\n\ndensity=true: Whether to include the density loss.\nregression=false: Whether to include the regression loss.\ncomplexity=1: The complexity penalty coefficient. Use 0 to disable the complexity penalty.\n\n\n\n\n\n","category":"function"},{"location":"overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"overview/","page":"Overview","title":"Overview","text":"In the sections that follow, we give scripts that reproduce the results in the paper. The detail behind the methods used, and the interpretation of the results, can be found in the paper. The first six sections discuss the four case studies, with the first two sections reproducing Figures 2 and 3 from the paper, and then the last sections show material that we give in the supplementary material. The complete table of contents is listed below.","category":"page"},{"location":"overview/","page":"Overview","title":"Overview","text":"Overview\nPaper:\nReproducing Figure 2\nReproducing Figure 3\nCase Study 1\nCase Study 2\nCase Study 3:\nAccurate continuum limit\nInaccurate continuum limit\nCase Study 4:\nAccurate continuum limit\nInaccurate continuum limit\nSupplementary Material:\nDiscrete Densities at the Boundaries\nPiecewise Proliferation Law\nLinear Diffusion\nParameter Sensitivity Study","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = StepwiseEQL","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation for StepwiseEQL.jl. Click here to go back to the GitHub repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package contains the code for the implementation of our stepwise equation learning framework introduced  in our paper Pushing coarse-grained models beyond the continuum limit using equation learning (VandenHeuvel et al., 2023).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The implementation is specific to the models of epithelial dynamics discussed in the paper, but you could  easily extend the code to other problems if you wish. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The sidebar contains the following sections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Installation: How to install the package and run the code.\nRepository Structure: A description of the structure of the GitHub repository.\nThe Algorithm: A description of how to run the algorithm. This does not describe the algorithm itself - see the paper for this.\nPaper Results: The sections in this section reproduce all the results in the paper.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"EditURL = \"https://github.com/DanielVandH/StepwiseEQL.jl/tree/main/docs/src/literate_supplementary_material/parameter_sensitivity.jl\"","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"tip: Tip\nThis example is also available as a Jupyter notebook: parameter_sensitivity.ipynb","category":"page"},{"location":"supplementary_material/parameter_sensitivity/#Parameter-Sensitivity-Study","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"","category":"section"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"In this section, we show how we performed our parameter sensitivity study given in the supplementary material of the paper. For this study, we use the problem for Case Study 3 in the case that the continuum limit is inaccurate. We set up this problem below.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random\nusing Setfield\nfinal_time = 75.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp);","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"The following function will be used for solving ens_prob.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"function solve_problem(prob; saveat=0.1, trajectories=1000, final_time=75.0)\n    prob = @set prob.final_time = final_time\n    ens_prob = EnsembleProblem(prob)\n    return solve(ens_prob, Tsit5(), EnsembleThreads(); saveat, trajectories) # multithreading ⟹ not deterministic\nend","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"The function below solves the equation learning problem and also returns the loss. We also extract the learned vectors.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"const diffusion_basis = PolynomialBasis(-1, -3)\nconst reaction_basis = PolynomialBasis(1, 5)\nfunction solve_eql_problem(esol::EnsembleSolution; num_knots=200, τq=0.25)\n    eql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n        threshold_tol=(q=τq,), num_knots=num_knots, initial=:none, show_progress=true, max_steps=10)\n    return eql_sol, eql_sol.loss_history[end], eql_sol.diffusion_theta, eql_sol.reaction_theta\nend","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"Now that we have our functions, we need to solve the problem for a large combination of parameters. We could do an extremely large combination, taking into account all the parameters, but this leads to a combinatorial issue. Instead, we vary parameters one at a time, using as default the values that led to a good result in the paper. The following ranges are what we use.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"base_saveat = 0.1\nbase_trajectories = 1000\nbase_num_knots = 200\nbase_τq = 0.25\nbase_final_time = 75.0\nn = 25\nsaveat = LinRange(0.1, 1.0, n)\ntrajectories = round.(Int, LinRange(10, 1000, n))\nfinal_time = LinRange(1.0, 100.0, n)\nnum_knots = round.(Int, LinRange(10, 250, n))\nτq = LinRange(0, 0.49, n)","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"25-element LinRange{Float64, Int64}:\n 0.0, 0.0204167, 0.0408333, 0.06125, 0.0816667, 0.102083, 0.1225, …, 0.3675, 0.387917, 0.408333, 0.42875, 0.449167, 0.469583, 0.49","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"Now we define the function that performs the study.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"function perform_study(saveat, trajectories, final_time, num_knots, τq,\n    base_saveat, base_trajectories, base_final_time, base_num_knots, base_τq)\n    n = length(saveat)\n    @assert n == length(trajectories) == length(final_time) == length(num_knots) == length(τq)\n    loss = zeros(n, 5)\n    diffusion_theta = Matrix{Vector{Float64}}(undef, n, 5)\n    reaction_theta = Matrix{Vector{Float64}}(undef, n, 5)\n    base_esol = solve_problem(prob; saveat=base_saveat, trajectories=base_trajectories, final_time=base_final_time)\n    for i in axes(loss, 1) # 1:n\n        @info \"Starting loop $i: Solving esol_saveat\"\n        esol_saveat = solve_problem(prob; saveat=saveat[i], trajectories=base_trajectories, final_time=base_final_time)\n        @info \"Starting loop $i: Solving esol_trajectories\"\n        esol_trajectories = solve_problem(prob; saveat=base_saveat, trajectories=trajectories[i], final_time=base_final_time)\n        @info \"Starting loop $i: Solving esol_final_time\"\n        esol_final_time = solve_problem(prob; saveat=base_saveat, trajectories=base_trajectories, final_time=final_time[i])\n        @info \"Starting loop $i: Solving eql_sol_saveat\"\n        eql_sol_saveat = solve_eql_problem(esol_saveat; num_knots=base_num_knots, τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_trajectories\"\n        eql_sol_trajectories = solve_eql_problem(esol_trajectories; num_knots=base_num_knots, τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_final_time\"\n        eql_sol_final_time = solve_eql_problem(esol_final_time; num_knots=base_num_knots, τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_num_knots\"\n        eql_sol_num_knots = solve_eql_problem(base_esol; num_knots=num_knots[i], τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_τq\"\n        eql_sol_τq = solve_eql_problem(base_esol; num_knots=base_num_knots, τq=τq[i])\n        loss[i, 1], diffusion_theta[i, 1], reaction_theta[i, 1] = eql_sol_saveat[2], eql_sol_saveat[3], eql_sol_saveat[4]\n        loss[i, 2], diffusion_theta[i, 2], reaction_theta[i, 2] = eql_sol_trajectories[2], eql_sol_trajectories[3], eql_sol_trajectories[4]\n        loss[i, 3], diffusion_theta[i, 3], reaction_theta[i, 3] = eql_sol_final_time[2], eql_sol_final_time[3], eql_sol_final_time[4]\n        loss[i, 4], diffusion_theta[i, 4], reaction_theta[i, 4] = eql_sol_num_knots[2], eql_sol_num_knots[3], eql_sol_num_knots[4]\n        loss[i, 5], diffusion_theta[i, 5], reaction_theta[i, 5] = eql_sol_τq[2], eql_sol_τq[3], eql_sol_τq[4]\n        GC.gc(true)\n    end\n    return loss, diffusion_theta, reaction_theta\nend","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"Finally, we perform the actual study. For the interest of time, we have already saved the results below, but if you like you can delete that file so that perform_study runs.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"using JLD2\nfile = joinpath(@__DIR__, \"study_data.jld2\")\nif isfile(file)\n    loss, diffusion_theta, reaction_theta = load(file, \"loss\", \"diffusion_theta\", \"reaction_theta\")\nelse\n    loss, diffusion_theta, reaction_theta = perform_study(saveat, trajectories, final_time, num_knots, τq,\n        base_saveat, base_trajectories, base_final_time, base_num_knots, base_τq)\n    jldsave(file; loss, diffusion_theta, reaction_theta)\nend\nloss","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"25×5 Matrix{Float64}:\n -1.41202    0.218977  -1.28605     0.0485026   0.157787\n -1.48509    0.223239  -0.542106    0.145979    0.150478\n -1.50792    0.171062  -0.294267   -2.33106     0.148175\n -1.58726    0.499913  -0.116057    0.171795    0.146162\n -1.37637   -0.665585   0.0777995  -1.52556     0.146085\n  ⋮\n -0.801099  -0.869353   0.104088   -1.21078     0.381131\n -1.81567   -1.32082    0.0839524   0.201087    0.324\n -1.71785   -1.17208    0.0397615  -0.630834    0.409037\n -1.67509   -1.38896   -0.121978    0.0910703  -0.232934","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"Let us now visualise the results.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"saveat_loss, trajectories_loss, final_time_loss, num_knots_loss, τq_loss = eachcol(loss)\ndiffθ_iszero = all.(iszero, diffusion_theta)\nsaveat_zerodiffθ, trajectories_zerodiffθ, final_time_zerodiffθ, num_knots_zerodiffθ, τq_zerodiffθ = eachcol(diffθ_iszero)\nfig = Figure(fontsize=44)\nax1 = Axis(fig[1, 1], xlabel=L\"h\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(a): $h$\", titlealign=:left, width=600, height=400,\n    xticks=(0:0.2:1, [L\"%$s\" for s in 0:0.2:1]),\n    yticks=(-1.5:0.5:0.5, [L\"%$s\" for s in -1.5:0.5:0.5]))\nax2 = Axis(fig[1, 2], xlabel=L\"n_s\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(b): $n_s$\", titlealign=:left, width=600, height=400,\n    xticks=(0:200:1000, [L\"%$s\" for s in 0:200:1000]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nax3 = Axis(fig[1, 3], xlabel=L\"t_M\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(c): $t_M$\", titlealign=:left, width=600, height=400,\n    xticks=(0:25:100, [L\"%$s\" for s in 0:25:100]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nax4 = Axis(fig[2, 1], xlabel=L\"n_k\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(d): $n_k$\", titlealign=:left, width=600, height=400,\n    xticks=(0:50:250, [L\"%$s\" for s in 0:50:250]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nax5 = Axis(fig[2, 2], xlabel=L\"\\tau_q\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(e): $\\tau_q$\", titlealign=:left, width=600, height=400,\n    xticks=(0:0.1:0.5, [L\"%$s\" for s in 0:0.1:0.5]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nscatter!(ax1, saveat, saveat_loss, markersize=17, color=[iszero(d) ? :red : :black for d in saveat_zerodiffθ])\nscatter!(ax2, trajectories, trajectories_loss, markersize=17, color=[iszero(d) ? :red : :black for d in trajectories_zerodiffθ])\nscatter!(ax3, final_time, final_time_loss, markersize=17, color=[iszero(d) ? :red : :black for d in final_time_zerodiffθ])\nscatter!(ax4, num_knots, num_knots_loss, markersize=17, color=[iszero(d) ? :red : :black for d in num_knots_zerodiffθ])\nscatter!(ax5, τq, τq_loss, markersize=17, color=[iszero(d) ? :red : :black for d in τq_zerodiffθ])\nxlims!(ax1, 0, 0.1 + maximum(saveat))\nxlims!(ax2, [-20, 20] .+ extrema(trajectories)...)\nxlims!(ax3, [-1, 5] .+ extrema(final_time)...)\nxlims!(ax4, [-10, 10] .+ extrema(num_knots)...)\nxlims!(ax5, [-0.05, 0.05] .+ extrema(τq)...)\nLegend(fig[2, 3],\n    [MarkerElement(color=:red, marker='.', markersize=122),\n        MarkerElement(color=:black, marker='.', markersize=122)],\n    [L\"D(q) \\neq 0\", L\"D(q) = 0\"],\n    halign=:left, valign=:top)\nresize_to_layout!(fig)\nfig","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"<figure>\n    <img src='sfigure_sensitivity.png', alt='Figure S7 from the paper'><br>\n</figure>","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"We colour the points in the above figure according to whether the learned D(q) is zero. We see little sensitivity to the number of time points. The number of simulations, n_s, also does not seem to matter so much, so long as there is a sufficient number of them. The final time, t_M, seems to be impactful, with only the interval 50 leq t_M leq 75 giving reasonable results. The number of knots used for averaging, n_k, does not matter as much, so long as there are not too few. Lastly, tau_q seems to be the most important parameter, with reasonable results only obtained for tau_q approx 025.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/#Just-the-code","page":"Parameter Sensitivity Study","title":"Just the code","text":"","category":"section"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"An uncommented version of this example is given below. You can view the source code for this file here.","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"using StepwiseEQL\nusing CairoMakie\nusing EpithelialDynamics1D\nusing OrdinaryDiffEq\nusing Random\nusing Setfield\nfinal_time = 75.0\ndomain_length = 30.0\nmidpoint = domain_length / 2\ninitial_condition = [LinRange(0, 5, 30); LinRange(25, 30, 30)] |> unique!\ndamping_constant = 1.0\nresting_spring_length = 0.2\nspring_constant = 1 / 5\nk = spring_constant\nforce_law_parameters = (s=resting_spring_length, k=spring_constant)\nforce_law = (δ, p) -> p.k * (p.s - δ)\nΔt = 1e-2\nK = 15.0\nβ = 0.15\nG = (δ, p) -> p.β * (one(δ) - inv(p.K * δ))\nGp = (β=β, K=K)\nprob = CellProblem(;\n    final_time,\n    initial_condition,\n    damping_constant,\n    force_law,\n    force_law_parameters,\n    proliferation_law=G,\n    proliferation_period=Δt,\n    proliferation_law_parameters=Gp)\n\nfunction solve_problem(prob; saveat=0.1, trajectories=1000, final_time=75.0)\n    prob = @set prob.final_time = final_time\n    ens_prob = EnsembleProblem(prob)\n    return solve(ens_prob, Tsit5(), EnsembleThreads(); saveat, trajectories) # multithreading ⟹ not deterministic\nend;\n\nconst diffusion_basis = PolynomialBasis(-1, -3)\nconst reaction_basis = PolynomialBasis(1, 5)\nfunction solve_eql_problem(esol::EnsembleSolution; num_knots=200, τq=0.25)\n    eql_sol = stepwise_selection(esol; diffusion_basis, reaction_basis,\n        threshold_tol=(q=τq,), num_knots=num_knots, initial=:none, show_progress=true, max_steps=10)\n    return eql_sol, eql_sol.loss_history[end], eql_sol.diffusion_theta, eql_sol.reaction_theta\nend;\n\nbase_saveat = 0.1\nbase_trajectories = 1000\nbase_num_knots = 200\nbase_τq = 0.25\nbase_final_time = 75.0\nn = 25\nsaveat = LinRange(0.1, 1.0, n)\ntrajectories = round.(Int, LinRange(10, 1000, n))\nfinal_time = LinRange(1.0, 100.0, n)\nnum_knots = round.(Int, LinRange(10, 250, n))\nτq = LinRange(0, 0.49, n)\n\nfunction perform_study(saveat, trajectories, final_time, num_knots, τq,\n    base_saveat, base_trajectories, base_final_time, base_num_knots, base_τq)\n    n = length(saveat)\n    @assert n == length(trajectories) == length(final_time) == length(num_knots) == length(τq)\n    loss = zeros(n, 5)\n    diffusion_theta = Matrix{Vector{Float64}}(undef, n, 5)\n    reaction_theta = Matrix{Vector{Float64}}(undef, n, 5)\n    base_esol = solve_problem(prob; saveat=base_saveat, trajectories=base_trajectories, final_time=base_final_time)\n    for i in axes(loss, 1) # 1:n\n        @info \"Starting loop $i: Solving esol_saveat\"\n        esol_saveat = solve_problem(prob; saveat=saveat[i], trajectories=base_trajectories, final_time=base_final_time)\n        @info \"Starting loop $i: Solving esol_trajectories\"\n        esol_trajectories = solve_problem(prob; saveat=base_saveat, trajectories=trajectories[i], final_time=base_final_time)\n        @info \"Starting loop $i: Solving esol_final_time\"\n        esol_final_time = solve_problem(prob; saveat=base_saveat, trajectories=base_trajectories, final_time=final_time[i])\n        @info \"Starting loop $i: Solving eql_sol_saveat\"\n        eql_sol_saveat = solve_eql_problem(esol_saveat; num_knots=base_num_knots, τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_trajectories\"\n        eql_sol_trajectories = solve_eql_problem(esol_trajectories; num_knots=base_num_knots, τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_final_time\"\n        eql_sol_final_time = solve_eql_problem(esol_final_time; num_knots=base_num_knots, τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_num_knots\"\n        eql_sol_num_knots = solve_eql_problem(base_esol; num_knots=num_knots[i], τq=base_τq)\n        @info \"Starting loop $i: Solving eql_sol_τq\"\n        eql_sol_τq = solve_eql_problem(base_esol; num_knots=base_num_knots, τq=τq[i])\n        loss[i, 1], diffusion_theta[i, 1], reaction_theta[i, 1] = eql_sol_saveat[2], eql_sol_saveat[3], eql_sol_saveat[4]\n        loss[i, 2], diffusion_theta[i, 2], reaction_theta[i, 2] = eql_sol_trajectories[2], eql_sol_trajectories[3], eql_sol_trajectories[4]\n        loss[i, 3], diffusion_theta[i, 3], reaction_theta[i, 3] = eql_sol_final_time[2], eql_sol_final_time[3], eql_sol_final_time[4]\n        loss[i, 4], diffusion_theta[i, 4], reaction_theta[i, 4] = eql_sol_num_knots[2], eql_sol_num_knots[3], eql_sol_num_knots[4]\n        loss[i, 5], diffusion_theta[i, 5], reaction_theta[i, 5] = eql_sol_τq[2], eql_sol_τq[3], eql_sol_τq[4]\n        GC.gc(true)\n    end\n    return loss, diffusion_theta, reaction_theta\nend;\n\nusing JLD2\nfile = joinpath(@__DIR__, \"study_data.jld2\")\nif isfile(file)\n    loss, diffusion_theta, reaction_theta = load(file, \"loss\", \"diffusion_theta\", \"reaction_theta\")\nelse\n    loss, diffusion_theta, reaction_theta = perform_study(saveat, trajectories, final_time, num_knots, τq,\n        base_saveat, base_trajectories, base_final_time, base_num_knots, base_τq)\n    jldsave(file; loss, diffusion_theta, reaction_theta)\nend\nloss\n\nsaveat_loss, trajectories_loss, final_time_loss, num_knots_loss, τq_loss = eachcol(loss)\ndiffθ_iszero = all.(iszero, diffusion_theta)\nsaveat_zerodiffθ, trajectories_zerodiffθ, final_time_zerodiffθ, num_knots_zerodiffθ, τq_zerodiffθ = eachcol(diffθ_iszero)\nfig = Figure(fontsize=44)\nax1 = Axis(fig[1, 1], xlabel=L\"h\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(a): $h$\", titlealign=:left, width=600, height=400,\n    xticks=(0:0.2:1, [L\"%$s\" for s in 0:0.2:1]),\n    yticks=(-1.5:0.5:0.5, [L\"%$s\" for s in -1.5:0.5:0.5]))\nax2 = Axis(fig[1, 2], xlabel=L\"n_s\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(b): $n_s$\", titlealign=:left, width=600, height=400,\n    xticks=(0:200:1000, [L\"%$s\" for s in 0:200:1000]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nax3 = Axis(fig[1, 3], xlabel=L\"t_M\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(c): $t_M$\", titlealign=:left, width=600, height=400,\n    xticks=(0:25:100, [L\"%$s\" for s in 0:25:100]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nax4 = Axis(fig[2, 1], xlabel=L\"n_k\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(d): $n_k$\", titlealign=:left, width=600, height=400,\n    xticks=(0:50:250, [L\"%$s\" for s in 0:50:250]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nax5 = Axis(fig[2, 2], xlabel=L\"\\tau_q\", ylabel=L\"\\mathcal{L}(\\mathbf{\\theta})\",\n    title=L\"(e): $\\tau_q$\", titlealign=:left, width=600, height=400,\n    xticks=(0:0.1:0.5, [L\"%$s\" for s in 0:0.1:0.5]),\n    yticks=(-2:0.5, [L\"%$s\" for s in -2:0.5]))\nscatter!(ax1, saveat, saveat_loss, markersize=17, color=[iszero(d) ? :red : :black for d in saveat_zerodiffθ])\nscatter!(ax2, trajectories, trajectories_loss, markersize=17, color=[iszero(d) ? :red : :black for d in trajectories_zerodiffθ])\nscatter!(ax3, final_time, final_time_loss, markersize=17, color=[iszero(d) ? :red : :black for d in final_time_zerodiffθ])\nscatter!(ax4, num_knots, num_knots_loss, markersize=17, color=[iszero(d) ? :red : :black for d in num_knots_zerodiffθ])\nscatter!(ax5, τq, τq_loss, markersize=17, color=[iszero(d) ? :red : :black for d in τq_zerodiffθ])\nxlims!(ax1, 0, 0.1 + maximum(saveat))\nxlims!(ax2, [-20, 20] .+ extrema(trajectories)...)\nxlims!(ax3, [-1, 5] .+ extrema(final_time)...)\nxlims!(ax4, [-10, 10] .+ extrema(num_knots)...)\nxlims!(ax5, [-0.05, 0.05] .+ extrema(τq)...)\nLegend(fig[2, 3],\n    [MarkerElement(color=:red, marker='.', markersize=122),\n        MarkerElement(color=:black, marker='.', markersize=122)],\n    [L\"D(q) \\neq 0\", L\"D(q) = 0\"],\n    halign=:left, valign=:top)\nresize_to_layout!(fig)\nfig","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"","category":"page"},{"location":"supplementary_material/parameter_sensitivity/","page":"Parameter Sensitivity Study","title":"Parameter Sensitivity Study","text":"This page was generated using Literate.jl.","category":"page"}]
}
